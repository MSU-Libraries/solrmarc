<project name="SolrMarc" default="jar" basedir=".">
    <description>
         A total rewrite of the SolrMarc project
    </description>
    <!-- load global properties for this build -->
	<property file="build.properties" />

    <!-- import other ant scripts -->
    <import file="${buildtools.dir}/parser_tasks.xml" optional="false" />
	
	<property name="cobertura.dir" value="test/lib/cobertura-2.1.1" />

	<path id="cobertura.classpath">
	    <fileset dir="${cobertura.dir}">
	        <include name="cobertura-2.1.1.jar" />
	        <include name="lib/**/*.jar" />
	    </fileset>
	</path>

	<taskdef classpathref="cobertura.classpath" resource="tasks.properties" />
	
	<tstamp>
	    <format property="TODAY" pattern="yyyy-MM-dd HH:mm:ss" />
	</tstamp>

    <target name="init">
        <!-- Create the time stamp -->
        <tstamp/>
        <!-- Create the build directory structure used by compile -->
        <mkdir dir="${build.dir}"/>
    </target>

    <target name="precompile" unless="precompile.already.run"  description="run jflex and cup to generate javafiles for parser and scanner" >
		<jflex file="${src.dir}/org/solrmarc/index/indexer/FullScanner.lex" verbose="true"
			   outdir="${src.dir}/org/solrmarc/index/indexer/" nobak="true" />

        <cup srcfile="${src.dir}/org/solrmarc/index/indexer/FullConditionalParser.cup"
             destdir="${src.dir}"
             package="org.solrmarc.index.indexer"
        	 symbols="FullSym"
             parser="FullConditionalParser"
        />
        <property name="precompile.already.run" value="true" />
	</target>

    <target name="compile" depends="init,precompile"  unless="compile.already.run"  description="compile the source">
        <!-- Compile the java code from ${src} into ${build} -->
        <javac target="${java.compat.version}" source="${java.compat.version}" srcdir="${src.dir}" destdir="${build.dir}" 
        	   debug="true" debuglevel="lines,vars,source" encoding="UTF-8" >
            <classpath >
                <fileset dir="${lib.dir}">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
            <classpath >
                <fileset dir="${lib.solrj.dir}">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </javac>
        <property name="compile.already.run" value="true" />
    </target>

    <target name="jar" depends="compile" unless="jar.already.run" description="Build custom jar file containing custom code" >
        <mkdir dir="${dist.dir}" />

        <path id="libjarfiles" >
            <fileset dir="${lib.dir}" includes="*.jar" />
        </path>

        <copy todir="${dist.lib.dir}" flatten="true">
            <path refid="libjarfiles"/>
        </copy>

        <jar destfile="${dist.dir}/${custom.jar.name}_${version}.jar">
        	<manifest>
        	    <attribute name="Main-Class" value="org.solrmarc.driver.Boot"/>
    		    <attribute name="Version" value="${version}"/>
    		    <attribute name="Built-Date" value="${TODAY}"/>
            </manifest>
        	<fileset dir="${build.dir}" includes="**/*.class" />
        </jar>
        <echo message="jar built" />
        <property name="jar.already.run" value="true" />
    </target>

    <target name="test-compile"  depends="jar" description="compile the source of tests" unless="test.already.compiled" >
        <!-- Compile the java code from ${src} into ${build} -->
        <mkdir dir="${test.build.dir}" />
        <javac target="${java.compat.version}" source="${java.compat.version}" srcdir="${test.src.dir}" destdir="${test.build.dir}" 
        	   debug="true" debuglevel="lines,vars,source" encoding="UTF-8" >
            <classpath id="test.classpath">
                <fileset dir="${dist.dir}">
                    <include name="${custom.jar.name}_${version}.jar"/>
                </fileset>
                <fileset dir="${dist.lib.dir}">
                    <include name="**/*.jar"/>
                </fileset>
                <fileset dir="${lib.solrj.dir}">
                    <include name="**/*.jar"/>
                </fileset>
                <fileset dir="${test.dir}/lib">
                    <include name="**/*.jar"/>
                </fileset>
                <fileset dir="${test.dir}/data/lib_local">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </javac>
        <jar destfile="${test.build.dir}/${custom.jar.name}_tests.jar">
            <manifest>
                <attribute name="Built-Date" value="${TODAY}"/>
            </manifest>
            <fileset dir="${test.build.dir}" includes="**/*.class" />
        </jar>
        <property name="test.already.compiled" value="true" />
    </target>

	<target name="test" depends="test-compile" unless="test.already.run">
        <mkdir dir="${reports.tests}" />
		<junit printsummary="yes" haltonfailure="false">
            <classpath>
                <fileset dir="${dist.dir}">
                    <include name="${custom.jar.name}_${version}.jar"/>
                </fileset>
                <fileset dir="${dist.dir}/lib">
                    <include name="*.jar"/>
                </fileset>
                <fileset dir="${test.dir}/lib">
                    <include name="*.jar"/>
                </fileset>
                <fileset dir="${test.build.dir}">
                    <include name="${custom.jar.name}_tests.jar"/>
                </fileset>
                <fileset dir="${lib.solrj.dir}">
                    <include name="*.jar"/>
                </fileset>
                <fileset dir="${test.dir}/data/lib_local">
                    <include name="**/*.jar"/>
                </fileset>

                <pathelement location="${build}"/>
                <pathelement location="${build.tests}"/>
                <pathelement path="${java.class.path}"/>
            </classpath>
            <sysproperty key="test.data.dir" path="${test.dir}/data" />
            <sysproperty key="log4j.debug" value="false" />

            <formatter type="plain"/>

            <batchtest fork="yes" todir="${reports.tests}">
                <fileset dir="${test.src.dir}">
                    <include name="**/*Test*.java"/>
                	<exclude name="**/ConditionalParserTest.java" />
                </fileset>
            </batchtest>
        </junit>
        <property name="test.already.run" value="true" />
    </target>

	<target name="coverage-instrument" unless="already.instrumented"  >
        <property name="instrumented.dir" value="test/instrument" />
        <property name="cobertura.datafile" value="${test.dir}/data/cobertura.ser" />
        <mkdir dir="${instrumented.dir}" />
        <delete file="${cobertura.datafile}" />
		
        <property name="cobertura.jar.dir"  location="${test.dir}/lib/cobertura-2.1.1/" />
        <path id="cobertura.classpath">
            <fileset dir="${cobertura.jar.dir}" includes="**/*.jar" />
            <fileset dir="${lib.dir}" includes="**/*.jar" />
        </path>
        <cobertura-instrument todir="${instrumented.dir}" datafile="${cobertura.datafile}" ignoreTrivial="true" >
            <ignore regex="org.apache.log4j.*|ch.qos.logback.*" />
            <fileset dir="${build.dir}">
                <include name="**/*.class" />
            </fileset>
        	<auxClasspath path="${lib.dir}/marc4j-2.7.2.jar;${lib.dir}/java-cup-11b-runtime.jar" />
        </cobertura-instrument>
		<property name="already.instrumented" value="true" />
	</target>
	
	<target name="coverage" depends="coverage-instrument" >
        <!-- <property name="testcase" value="org.solrmarc.index.UtilsTests" /> -->
		<junit fork="yes" dir="${basedir}" failureProperty="test.failed">
		    <!--
		        Specify the name of the coverage data file to use.
		        The value specified below is the default.
		    -->
		    <sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.datafile}" />

		    <!--
		        Note the classpath order: instrumented classes are before the
		        original (uninstrumented) classes.  This is important.-->
		    
		    <classpath location="${instrumented.dir}" />
		    <classpath location="${build.dir}" />
            <classpath>
            	<fileset dir="${test.dir}/lib">
                    <include name="*.jar"/>
                </fileset>
                <fileset dir="${test.build.dir}">
                    <include name="${custom.jar.name}_tests.jar"/>
                </fileset>
                <fileset dir="${lib.solrj.dir}">
                    <include name="*.jar"/>
                </fileset>
                <pathelement location="${build}"/>
                <pathelement location="${build.tests}"/>
                <pathelement path="${java.class.path}"/>
            </classpath>

		    <!--
		        The instrumented classes reference classes used by the
		        Cobertura runtime, so Cobertura and its dependencies
		        must be on your classpath.
		    -->
		    <classpath refid="cobertura.classpath" />
            <sysproperty key="test.data.dir" path="${test.dir}/data" />
            <sysproperty key="log4j.debug" value="false" />
			
		    <formatter type="xml" />
		    <test name="${testcase}" todir="${reports.tests}" if="testcase" />
		    <batchtest todir="${reports.tests}" unless="testcase">
		        <fileset dir="${test.src.dir}">
		            <include name="**/*Test*.java" />
                    <exclude name="**/ConditionalParserTest.java" />
		        </fileset>
		    </batchtest>
		</junit>
		
        <mkdir dir="${reports.tests}/coverage" />
		<cobertura-report format="html" destdir="${reports.tests}/coverage" srcdir="${src.dir}" datafile="${cobertura.datafile}"/>
        <cobertura-report format="xml" destdir="${reports.tests}/coverage" srcdir="${src.dir}" datafile="${cobertura.datafile}"/> 
 
	</target>
	
	<target name="package" depends="jar, test">
		<echo message="Building required jars zip file" />
		<zip file="${dist.dir}/required_jars_${version}.zip" >
			<zipfileset dir="${dist.dir}/lib" prefix="lib" includes="*.jar" />
	    </zip>
		<echo message="Building simple install package zip file" />
		<zip file="${dist.dir}/simple_install_package_${version}.zip" >
			<zipfileset dir="${dist.dir}" prefix="" includes="${custom.jar.name}_${version}.jar" />
			<zipfileset dir="${buildtools.dir}/install_template" prefix="" includes="**" />
			<zipfileset dir="${dist.dir}/lib" prefix="lib" includes="*.jar" />
	    </zip>
	</target>

    <target name="clean" description="clean up">
        <!-- Delete the ${build} and ${dist} directory trees -->
        <delete dir="${build.dir}" failonerror="false" />
        <delete dir="${dist.dir}" failonerror="false" />
        <delete dir="${test.build.dir}"  failonerror="false" />
        <delete dir="${test.dir}/data/index_java/bin" failonerror="false"  />
        <delete dir="${reports.tests}"  failonerror="false" />
    	<delete file="${src.dir}/org/solrmarc/index/indexer/FullConditionalParser.java"  failonerror="false" />
    	<delete file="${src.dir}/org/solrmarc/index/indexer/FullConditionalScanner.java"  failonerror="false" />
    	<delete file="${src.dir}/org/solrmarc/index/indexer/FullSym.java"  failonerror="false" />
    </target>
</project>