<project name="MyProject" default="compile" basedir=".">
    <description>
        simple example build file
    </description>
    <!-- set global properties for this build -->
    <property name="src" location="src"/>
    <property name="src.tests" location="test"/>
    <property name="build" location="build"/>
    <property name="build.tests" location="out/test"/>
    <property name="dist" location="dist"/>
    <property name="lib" location="lib"/>
    <property name="distlib" location="dist/lib"/>
    <property name="reports.tests" location="logs"/>
    <property name="custom.jar.name" value="solrmarc_core"/>

    <!-- import other ant scripts -->
    <property name="buildtools.path" location="buildtools" />

    <import file="${buildtools.path}/parser_tasks.xml" optional="true" />


    <target name="init">
        <!-- Create the time stamp -->
        <tstamp/>
        <!-- Create the build directory structure used by compile -->
        <mkdir dir="${build}"/>
    </target>

    <target name="precompile" description="run jflex and cup to generate javafiles for parser and scanner" >
		<jflex file="${src}/org/solrmarc/index/specification/conditional/Scanner.lex" verbose="true" 
			   outdir="${src}/org/solrmarc/index/specification/conditional" nobak="true" />
    	
        <cup srcfile="${src}/org/solrmarc/index/specification/conditional/ConditionalParser.cup"
             destdir="${src}"
             package="org.solrmarc.index.specification.conditional"
       	 	 symbols="sym"
             parser="ConditionalParser"
        />
		<jflex file="${src}/org/solrmarc/index/indexer/FullScanner.lex" verbose="true" 
			   outdir="${src}/org/solrmarc/index/indexer/" nobak="true" />
    	
        <cup srcfile="${src}/org/solrmarc/index/indexer/FullConditionalParser.cup"
             destdir="${src}"
             package="org.solrmarc.index.indexer"
        	 symbols="FullSym"
             parser="FullConditionalParser"
        />
	</target>

    <target name="compile" depends="init,precompile"
            description="compile the source">
        <!-- Compile the java code from ${src} into ${build} -->
        <javac srcdir="${src}" destdir="${build}" debug="true" debuglevel="lines,vars,source" >
            <classpath >
                <fileset dir="lib">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
            <classpath >
                <fileset dir="lib-solrj">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </javac>
    </target>

    <target name="jar" depends="compile" unless="jar.already.run"
            description="Build custom jar file containing custom code and log4j.properties" >
        <mkdir dir="${dist}" />

        <resources id="allclassfiles" >
            <fileset dir="${build}" includes="**/*.class" />
            <fileset dir="${basedir}" includes="log4j.properties" />
        </resources>

        <path id="libjarfiles" >
            <fileset dir="${lib}" includes="*.jar" excludes="jopt*.jar"/>
        </path>

        <copy todir="${distlib}" flatten="true">
          <path  refid="libjarfiles"/>
        </copy> 
        
        <path id="solrjjarfiles" >
            <fileset dir="lib-solrj" includes="*.jar" />
        </path>

        <copy todir="${dist}/lib-solrj" flatten="true">
          <path  refid="solrjjarfiles"/>
        </copy> 
        
        <mkdir dir="${dist}/index_java/" />
        <copy todir="${dist}/index_java" >
            <fileset dir="index_java" includes="src/**/*.java"/>
        </copy> 
        
        <mkdir dir="${dist}/translation_maps" />
        <copy todir="${dist}/translation_maps" >
            <fileset dir="translation_maps" includes="*.properties"/>
        </copy> 
        
        <mkdir dir="${dist}/index_scripts/" />
        <copy todir="${dist}/index_scripts/" >
            <fileset dir="index_scripts/" includes="*.bsh"/>
        </copy> 
       
    	<mkdir dir="${dist}/extra_data" />
        <copy todir="${dist}/extra_data" >
            <fileset dir="extra_data" includes="*"/>
        </copy> 
        
    	<mkdir dir="${dist}/resources" />
        <copy todir="${dist}/resources" >
            <fileset dir="resources" includes="*.properties"/>
        </copy> 
        
    	<manifestclasspath property="manifest.classpath" jarfile="${dist}/${custom.jar.name}.jar">
    	    <classpath>
    	        <fileset dir="${distlib}" includes="*.jar"/>
    	    </classpath>
    	</manifestclasspath>
    	
        <jar destfile="${dist}/${custom.jar.name}.jar">
        	<manifest>
        	    <attribute name="Main-Class" value="org.solrmarc.driver.Boot"/>
        <!--		<attribute name="Class-Path" value="${manifest.classpath}" />  -->
            </manifest>
        	<fileset dir="${basedir}" includes="log4j.properties" />
        	<fileset dir="${build}" includes="**/*.class" />
        </jar>
        <echo message="jar built" />
        <property name="build.already.run" value="true" />
    </target>

    <target name="test">
        <junit printsummary="yes" haltonfailure="false">
            <classpath>
                <fileset dir="lib">
                    <include name="**/*.jar"/>
                </fileset>
                <pathelement location="${build}"/>
                <pathelement location="${build.tests}"/>
                <pathelement path="${java.class.path}"/>
            </classpath>

            <formatter type="plain"/>

            <batchtest fork="yes" todir="${reports.tests}">
                <fileset dir="${src.tests}">
                    <include name="**/*Test*.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="clean"
            description="clean up">
        <!-- Delete the ${build} and ${dist} directory trees -->
        <delete dir="${build}"/>
        <delete dir="${dist}"/>
    </target>
</project>