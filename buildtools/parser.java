
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

import java_cup.runtime.*;
import org.solrmarc.conditional.ConditionalScanner;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\032\000\002\002\004\000\002\002\005\000\002\002" +
    "\003\000\002\003\005\000\002\003\003\000\002\004\007" +
    "\000\002\004\003\000\002\005\006\000\002\005\006\000" +
    "\002\005\003\000\002\006\004\000\002\006\004\000\002" +
    "\007\005\000\002\007\005\000\002\007\004\000\002\007" +
    "\005\000\002\007\003\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\063\000\006\005\004\024\007\001\002\000\004\024" +
    "\056\001\002\000\006\002\ufff8\004\ufff8\001\002\000\006" +
    "\002\052\004\051\001\002\000\006\025\012\026\013\001" +
    "\002\000\006\002\ufffb\004\ufffb\001\002\000\006\002\uffff" +
    "\004\uffff\001\002\000\010\002\ufff7\004\ufff7\007\047\001" +
    "\002\000\010\002\ufff6\004\ufff6\007\014\001\002\000\014" +
    "\012\015\013\021\022\023\023\016\026\020\001\002\000" +
    "\014\012\015\013\021\022\023\023\016\026\020\001\002" +
    "\000\010\015\026\016\025\021\024\001\002\000\014\002" +
    "\ufff1\004\ufff1\010\ufff1\011\ufff1\014\ufff1\001\002\000\010" +
    "\015\026\016\025\021\024\001\002\000\014\012\015\013" +
    "\021\022\023\023\016\026\020\001\002\000\012\002\ufff9" +
    "\004\ufff9\010\034\011\035\001\002\000\010\015\026\016" +
    "\025\021\024\001\002\000\010\027\uffeb\030\uffeb\031\uffeb" +
    "\001\002\000\010\027\uffec\030\uffec\031\uffec\001\002\000" +
    "\010\027\uffed\030\uffed\031\uffed\001\002\000\010\027\031" +
    "\030\033\031\030\001\002\000\014\002\uffe8\004\uffe8\010" +
    "\uffe8\011\uffe8\014\uffe8\001\002\000\014\002\uffea\004\uffea" +
    "\010\uffea\011\uffea\014\uffea\001\002\000\014\002\ufff0\004" +
    "\ufff0\010\ufff0\011\ufff0\014\ufff0\001\002\000\014\002\uffe9" +
    "\004\uffe9\010\uffe9\011\uffe9\014\uffe9\001\002\000\014\012" +
    "\015\013\021\022\023\023\016\026\020\001\002\000\014" +
    "\012\015\013\021\022\023\023\016\026\020\001\002\000" +
    "\014\002\ufff4\004\ufff4\010\ufff4\011\ufff4\014\ufff4\001\002" +
    "\000\014\002\ufff5\004\ufff5\010\ufff5\011\035\014\ufff5\001" +
    "\002\000\010\010\034\011\035\014\041\001\002\000\014" +
    "\002\ufff2\004\ufff2\010\ufff2\011\ufff2\014\ufff2\001\002\000" +
    "\010\027\031\030\033\031\030\001\002\000\014\002\uffee" +
    "\004\uffee\010\uffee\011\uffee\014\uffee\001\002\000\010\027" +
    "\031\030\033\031\030\001\002\000\014\002\uffef\004\uffef" +
    "\010\uffef\011\uffef\014\uffef\001\002\000\014\002\ufff3\004" +
    "\ufff3\010\034\011\035\014\ufff3\001\002\000\014\012\015" +
    "\013\021\022\023\023\016\026\020\001\002\000\012\002" +
    "\ufffa\004\ufffa\010\034\011\035\001\002\000\006\005\004" +
    "\024\007\001\002\000\004\002\001\001\002\000\006\002" +
    "\000\004\000\001\002\000\006\004\ufffd\006\ufffd\001\002" +
    "\000\006\004\062\006\061\001\002\000\006\025\057\026" +
    "\060\001\002\000\006\004\ufff7\006\ufff7\001\002\000\006" +
    "\004\ufff6\006\ufff6\001\002\000\004\007\064\001\002\000" +
    "\004\024\056\001\002\000\006\004\ufffe\006\ufffe\001\002" +
    "\000\014\012\015\013\021\022\023\023\016\026\020\001" +
    "\002\000\012\002\ufffc\004\ufffc\010\034\011\035\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\063\000\012\002\005\004\010\005\007\006\004\001" +
    "\001\000\006\003\054\006\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\021\010\016\001\001\000\006\007\045\010\016\001" +
    "\001\000\004\012\043\001\001\000\002\001\001\000\004" +
    "\012\041\001\001\000\006\007\037\010\016\001\001\000" +
    "\002\001\001\000\004\012\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\036\010\016\001\001\000" +
    "\006\007\035\010\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\042\001\001\000\002\001\001\000\004\011\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\047\010" +
    "\016\001\001\000\002\001\001\000\010\004\052\005\007" +
    "\006\004\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\062\001\001\000\002\001\001\000\006\007\064\010\016" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    ConditionalScanner s;
    static boolean parser_debug;
    public static void setParserDebug(boolean b) { parser_debug = b; } 
    public static boolean shouldParserDebug()    { return(parser_debug); }
    public ConditionalParser(ConditionalScanner s, SymbolFactory sf) 
    { super(s, sf); this.s=s; }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= field_spec EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CompositeSpecification start_val = (CompositeSpecification)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // field_spec ::= field_spec COLON field_spec_part 
            {
              CompositeSpecification RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CompositeSpecification s = (CompositeSpecification)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CompositeSpecification s1 = (CompositeSpecification)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 s.addSpec(s1); RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_spec",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // field_spec ::= field_spec_part 
            {
              CompositeSpecification RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CompositeSpecification s = (CompositeSpecification)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CompositeSpecification(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_spec",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // field_spec_simple ::= field_spec_simple COLON field_spec_part_simple 
            {
              CompositeSpecification RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CompositeSpecification s = (CompositeSpecification)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SingleSpecification s1 = (SingleSpecification)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 s.addSpec(s1); RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_spec_simple",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // field_spec_simple ::= field_spec_part_simple 
            {
              CompositeSpecification RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SingleSpecification s = (SingleSpecification)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CompositeSpecification(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_spec_simple",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // field_spec_part ::= LBRACE field_spec_simple RBRACE QUESTION expr 
            {
              CompositeSpecification RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CompositeSpecification s = (CompositeSpecification)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConditionalSpecification e = (ConditionalSpecification)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 s.addConditional(e); RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_spec_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // field_spec_part ::= field_spec_part_complex 
            {
              CompositeSpecification RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SingleSpecification s = (SingleSpecification)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CompositeSpecification(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_spec_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // field_spec_part_complex ::= FIELDSPEC SUBFIELDSPEC QUESTION expr 
            {
              SingleSpecification RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String sf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConditionalSpecification e = (ConditionalSpecification)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SingleSpecification(f, sf, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_spec_part_complex",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // field_spec_part_complex ::= FIELDSPEC POSITION QUESTION expr 
            {
              SingleSpecification RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConditionalSpecification e = (ConditionalSpecification)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SingleSpecification(f, p, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_spec_part_complex",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // field_spec_part_complex ::= field_spec_part_simple 
            {
              SingleSpecification RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SingleSpecification s = (SingleSpecification)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_spec_part_complex",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // field_spec_part_simple ::= FIELDSPEC SUBFIELDSPEC 
            {
              SingleSpecification RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SingleSpecification(f, sf); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_spec_part_simple",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // field_spec_part_simple ::= FIELDSPEC POSITION 
            {
              SingleSpecification RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SingleSpecification(f, p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_spec_part_simple",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= expr AND expr 
            {
              ConditionalSpecification RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConditionalSpecification e1 = (ConditionalSpecification)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConditionalSpecification e2 = (ConditionalSpecification)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConditionalSpecification(e1, e2, sym.AND);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= expr OR expr 
            {
              ConditionalSpecification RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConditionalSpecification e1 = (ConditionalSpecification)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConditionalSpecification e2 = (ConditionalSpecification)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConditionalSpecification(e1, e2, sym.OR);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= NOT expr 
            {
              ConditionalSpecification RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConditionalSpecification e = (ConditionalSpecification)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConditionalSpecification(e, null, sym.NOT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= LPAREN expr RPAREN 
            {
              ConditionalSpecification RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ConditionalSpecification e = (ConditionalSpecification)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr_part 
            {
              ConditionalSpecification RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConditionalSpecification e = (ConditionalSpecification)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr_part ::= SUBFIELD op value 
            {
              ConditionalSpecification RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConditionalSpecification(sym.SUBFIELD, s1, s2, ((int)i));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_part",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr_part ::= IND op value 
            {
              ConditionalSpecification RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConditionalSpecification(sym.IND, s1, s2, ((int)i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_part",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr_part ::= POSITION op value 
            {
              ConditionalSpecification RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConditionalSpecification(sym.POSITION, s1, s2, ((int)i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_part",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // op ::= EQU 
            {
              Integer RESULT =null;
		 RESULT = new Integer(sym.EQU); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // op ::= NEQ 
            {
              Integer RESULT =null;
		 RESULT = new Integer(sym.NEQ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // op ::= MATCH 
            {
              Integer RESULT =null;
		 RESULT = new Integer(sym.MATCH); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // value ::= QUOTEDSTR 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // value ::= CHAR 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // value ::= NUMBER 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
