/* The following code was generated by JFlex 1.6.0 */

package playground.solrmarc.index.indexer;

import java_cup.runtime.SymbolFactory;
import java.util.List;
import java.util.ArrayList;
//import java.io.StringReader;
import playground.solrmarc.index.utils.StringReader;
import java_cup.runtime.ComplexSymbolFactory;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>C:/Users/rh9ec/Development/Projects/SolrMarc3.0-Github/src/playground/solrmarc/index/indexer/FullScanner.flex</tt>
 */
public class FullConditionalScanner extends playground.solrmarc.index.indexer.FullSym implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STARTSPEC = 2;
  public static final int STRING = 4;
  public static final int CONDITIONAL = 6;
  public static final int SUBFIELDSPEC = 8;
  public static final int CUSTOMSPEC = 10;
  public static final int CUSTOMMETHOD = 12;
  public static final int CUSTOMPARAM = 14;
  public static final int MAPSPEC = 16;
  public static final int CONSTANT = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,  8,  8, 
     9,  9, 10, 10
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\4\1\44\1\45\1\3\22\0\1\5\1\73\1\60"+
    "\1\46\1\71\1\0\1\100\1\101\1\62\1\63\2\0\1\42\1\66"+
    "\1\7\1\0\1\1\1\72\1\22\7\2\1\54\1\0\1\76\1\43"+
    "\1\77\1\55\1\0\1\32\4\53\1\25\2\53\1\40\1\53\1\52"+
    "\1\50\1\53\1\51\1\33\1\35\1\53\1\27\10\53\1\64\1\102"+
    "\1\67\1\65\1\41\1\0\1\14\1\36\1\30\1\31\1\24\1\34"+
    "\1\6\1\75\1\37\1\16\1\6\1\12\1\11\1\21\1\20\1\56"+
    "\1\6\1\13\1\17\1\23\1\26\1\57\1\15\1\10\2\6\1\47"+
    "\1\61\1\70\1\74\6\0\1\44\u1fa2\0\1\44\1\44\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\1\1\2\2\1\3\1\4\1\5\1\6\13\1"+
    "\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\2\17\2\1\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\1\1\26\1\1\1\27\1\30\1\31\1\32"+
    "\1\33\1\1\1\34\1\35\1\36\1\37\1\1\1\40"+
    "\1\1\1\41\1\42\1\43\1\44\1\45\15\0\1\46"+
    "\1\47\1\50\1\51\3\0\1\20\1\23\1\0\1\52"+
    "\1\53\1\33\4\0\1\54\1\0\1\55\1\56\10\0"+
    "\1\55\1\57\3\0\1\60\1\61\1\0\1\34\1\62"+
    "\1\56\3\0\1\63\3\0\1\64\1\65\1\0\1\66"+
    "\7\0\1\67\1\0\1\70\23\0\1\63\3\0\1\56"+
    "\12\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u02e1\0\u0367\0\u02e1"+
    "\0\u02e1\0\u03aa\0\u03ed\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c"+
    "\0\u057f\0\u05c2\0\u0605\0\u0648\0\u068b\0\u02e1\0\u02e1\0\u06ce"+
    "\0\u02e1\0\u02e1\0\u02e1\0\u0711\0\u02e1\0\u0754\0\u0797\0\u07da"+
    "\0\u081d\0\u0860\0\u08a3\0\u02e1\0\u02e1\0\u08e6\0\u02e1\0\u02e1"+
    "\0\u0929\0\u02e1\0\u096c\0\u09af\0\u02e1\0\u02e1\0\u02e1\0\u09f2"+
    "\0\u0a35\0\u0a78\0\u02e1\0\u02e1\0\u02e1\0\u0abb\0\u02e1\0\u0afe"+
    "\0\u02e1\0\u02e1\0\u02e1\0\u02e1\0\u02e1\0\u0b41\0\u0b84\0\u0bc7"+
    "\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf"+
    "\0\u0e22\0\u0e65\0\u02e1\0\u02e1\0\u02e1\0\u02e1\0\u0ea8\0\u0eeb"+
    "\0\u0f2e\0\u02e1\0\u02e1\0\u0f71\0\u02e1\0\u02e1\0\u02e1\0\u0fb4"+
    "\0\u0ff7\0\u103a\0\u107d\0\u0afe\0\u0afe\0\u02e1\0\u02e1\0\u10c0"+
    "\0\u1103\0\u1146\0\u1189\0\u11cc\0\u120f\0\u1252\0\u1295\0\u12d8"+
    "\0\u02e1\0\u131b\0\u135e\0\u13a1\0\u02e1\0\u02e1\0\u13e4\0\u02e1"+
    "\0\u02e1\0\u1427\0\u146a\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u03ed"+
    "\0\u15b9\0\u02e1\0\u02e1\0\u15fc\0\u02e1\0\u163f\0\u1682\0\u16c5"+
    "\0\u1708\0\u174b\0\u178e\0\u17d1\0\u02e1\0\u1814\0\u02e1\0\u1857"+
    "\0\u189a\0\u18dd\0\u1920\0\u1963\0\u19a6\0\u19e9\0\u1a2c\0\u1a6f"+
    "\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe\0\u1c01\0\u1c44\0\u1c87"+
    "\0\u1cca\0\u1d0d\0\u02e1\0\u1d50\0\u1d93\0\u1dd6\0\u1e19\0\u1e5c"+
    "\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68\0\u1fab\0\u1fee\0\u2031\0\u2074"+
    "\0\u20b7";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\14\1\15\2\16\1\17\1\14\12\17\1\14\16\17"+
    "\1\14\1\20\1\21\1\14\1\16\2\14\4\17\2\14"+
    "\2\17\15\14\1\17\10\14\1\15\2\16\1\17\1\14"+
    "\12\17\1\14\16\17\1\14\1\20\1\21\1\14\1\16"+
    "\1\22\1\14\4\17\2\14\2\17\15\14\1\17\6\14"+
    "\2\23\1\15\2\16\2\14\1\24\2\14\1\25\2\14"+
    "\1\26\1\27\2\14\1\23\1\30\1\14\1\31\1\14"+
    "\1\32\1\33\1\34\2\32\1\14\1\32\1\14\1\35"+
    "\1\32\1\14\1\36\2\14\1\16\1\14\1\37\1\40"+
    "\3\32\1\41\1\42\2\14\1\43\11\14\1\23\10\14"+
    "\3\44\2\14\53\44\1\45\21\44\1\46\1\14\1\47"+
    "\1\50\1\15\2\16\3\14\1\51\10\14\1\50\14\14"+
    "\1\52\3\14\1\53\1\14\1\16\6\14\1\54\3\14"+
    "\1\55\1\56\1\57\1\60\1\61\3\14\1\62\1\63"+
    "\1\50\1\64\1\65\1\14\1\66\1\67\1\70\1\71"+
    "\4\14\1\15\2\16\1\72\1\14\12\72\1\14\2\72"+
    "\1\14\1\72\1\14\2\72\2\14\1\72\1\14\2\72"+
    "\2\14\1\73\2\14\1\16\6\14\1\74\1\75\2\72"+
    "\4\14\1\76\3\14\1\77\4\14\1\72\6\14\2\100"+
    "\1\15\2\16\1\100\1\14\31\100\1\14\1\101\2\14"+
    "\1\16\2\14\4\100\2\14\2\100\2\14\1\57\1\60"+
    "\6\14\1\100\2\14\1\100\6\14\2\100\3\14\1\100"+
    "\1\14\31\100\1\14\1\102\5\14\4\100\2\14\2\100"+
    "\2\14\1\103\7\14\1\100\2\14\1\100\6\14\2\100"+
    "\1\15\2\16\1\100\1\14\31\100\1\14\1\20\2\14"+
    "\1\16\2\14\4\100\2\14\2\100\1\104\1\14\1\57"+
    "\1\105\6\14\1\100\2\14\1\100\6\14\2\100\3\14"+
    "\1\100\1\14\31\100\1\14\1\20\5\14\4\100\2\14"+
    "\2\100\2\14\1\103\1\60\6\14\1\100\2\14\1\100"+
    "\47\14\1\73\15\14\1\43\1\56\21\14\107\0\1\16"+
    "\77\0\2\17\3\0\1\17\1\0\32\17\6\0\4\17"+
    "\2\0\2\17\12\0\1\17\2\0\1\17\5\0\3\22"+
    "\2\0\37\22\2\0\35\22\1\0\2\106\17\0\1\106"+
    "\47\0\1\106\21\0\1\107\105\0\1\110\102\0\1\111"+
    "\2\0\1\112\113\0\1\113\76\0\1\114\103\0\1\115"+
    "\1\116\1\115\2\0\2\115\1\0\1\115\2\0\1\115"+
    "\7\0\4\115\54\0\1\115\1\0\1\115\2\0\2\115"+
    "\1\0\1\115\2\0\1\115\7\0\4\115\55\0\1\117"+
    "\70\0\1\120\107\0\1\121\106\0\1\115\1\0\1\115"+
    "\2\0\2\115\1\0\1\115\2\0\1\115\7\0\1\115"+
    "\1\122\2\115\27\0\3\44\2\0\53\44\1\0\21\44"+
    "\14\0\1\123\5\0\1\124\1\0\1\125\34\0\1\126"+
    "\23\0\1\127\102\0\2\50\17\0\1\50\47\0\1\50"+
    "\24\0\1\130\107\0\1\131\124\0\1\132\120\0\1\133"+
    "\22\0\2\134\17\0\1\134\47\0\1\134\11\0\2\135"+
    "\3\0\1\135\1\0\31\135\7\0\4\135\2\0\2\135"+
    "\12\0\1\135\2\0\1\135\50\0\1\136\137\0\1\137"+
    "\2\0\102\140\1\141\1\0\2\72\3\0\1\72\1\0"+
    "\15\72\1\0\1\72\1\0\2\72\2\0\1\72\1\0"+
    "\2\72\16\0\2\72\12\0\1\72\2\0\1\72\6\0"+
    "\2\134\3\0\1\142\1\0\12\142\1\134\2\142\1\0"+
    "\1\142\1\0\2\142\2\0\1\142\1\0\2\142\16\0"+
    "\2\142\5\0\1\143\4\0\1\134\2\0\1\142\6\0"+
    "\2\144\3\0\1\144\1\145\31\144\1\145\6\0\4\144"+
    "\2\0\2\144\12\0\1\144\2\0\1\144\6\0\2\146"+
    "\17\0\1\146\47\0\1\146\22\0\1\147\105\0\1\147"+
    "\144\0\1\150\43\0\1\151\75\0\1\152\77\0\1\153"+
    "\117\0\1\146\1\0\1\146\2\0\2\146\1\0\1\146"+
    "\2\0\1\146\7\0\4\146\41\0\1\154\107\0\1\155"+
    "\106\0\1\156\110\0\1\157\76\0\1\146\1\0\1\146"+
    "\2\0\2\146\1\0\1\146\2\0\1\146\7\0\2\146"+
    "\1\160\1\146\30\0\2\161\17\0\1\161\47\0\1\161"+
    "\33\0\1\162\110\0\1\163\52\0\2\134\17\0\1\134"+
    "\43\0\1\164\1\165\2\0\1\134\111\0\1\166\1\0"+
    "\3\167\2\0\37\167\2\0\35\167\1\0\2\142\3\0"+
    "\1\142\1\0\15\142\1\0\1\142\1\0\2\142\2\0"+
    "\1\142\1\0\2\142\16\0\2\142\6\0\1\142\1\170"+
    "\2\0\1\142\2\0\1\142\13\0\1\142\1\0\12\142"+
    "\1\0\2\142\1\0\1\142\1\0\2\142\2\0\1\142"+
    "\1\0\2\142\16\0\2\142\15\0\1\142\21\0\1\171"+
    "\107\0\1\172\120\0\1\173\66\0\1\147\71\0\1\174"+
    "\113\0\1\175\103\0\1\176\102\0\1\177\57\0\2\200"+
    "\17\0\1\200\47\0\1\200\40\0\1\201\53\0\2\202"+
    "\17\0\1\203\47\0\1\203\11\0\2\204\17\0\1\204"+
    "\47\0\1\204\111\0\1\205\23\0\1\147\136\0\1\206"+
    "\53\0\1\207\73\0\1\210\111\0\1\211\3\0\1\212"+
    "\57\0\1\213\167\0\1\214\6\0\2\204\17\0\1\204"+
    "\44\0\1\165\2\0\1\204\33\0\1\215\103\0\1\216"+
    "\67\0\1\217\115\0\1\220\112\0\1\221\107\0\1\222"+
    "\65\0\1\223\106\0\1\224\102\0\1\225\107\0\1\226"+
    "\76\0\1\227\70\0\1\65\103\0\1\230\102\0\1\231"+
    "\110\0\1\232\70\0\1\233\101\0\1\234\102\0\1\235"+
    "\125\0\1\236\67\0\1\237\110\0\1\240\102\0\1\241"+
    "\63\0\1\242\114\0\1\243\110\0\1\244\110\0\1\245"+
    "\101\0\1\246\62\0\1\247\104\0\1\250\111\0\1\251"+
    "\53\0\2\247\3\0\1\247\1\0\31\247\7\0\4\247"+
    "\2\0\2\247\12\0\1\247\2\0\1\247\36\0\1\252"+
    "\65\0\1\253\112\0\1\254\101\0\1\255\67\0\1\256"+
    "\131\0\1\257\67\0\1\260\76\0\1\261\113\0\1\243"+
    "\72\0\1\243\61\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8442];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\1\11\1\1\1\11\1\1\2\11\14\1\2\11"+
    "\1\1\3\11\1\1\1\11\6\1\2\11\1\1\2\11"+
    "\1\1\1\11\2\1\3\11\3\1\3\11\1\1\1\11"+
    "\1\1\5\11\15\0\4\11\3\0\2\11\1\0\3\11"+
    "\4\0\1\1\1\0\2\11\10\0\1\1\1\11\3\0"+
    "\2\11\1\0\2\11\1\1\3\0\1\1\3\0\2\11"+
    "\1\0\1\11\7\0\1\11\1\0\1\11\23\0\1\11"+
    "\3\0\1\1\12\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    int save_zzLexicalState;
    
    List<String> scanner_errors = null;
    StringBuilder string = new StringBuilder();
    public FullConditionalScanner(ComplexSymbolFactory sf)
    {
		this(new StringReader(""));
		this.sf = sf;
		scanner_errors = new ArrayList<String>();
    }
    
    SymbolFactory sf;
    
    public void startParse(String strToParse)
    {
        yyreset(new StringReader(strToParse));
        scanner_errors = new ArrayList<String>();
    }
    
    private void error(String message) 
    {
        scanner_errors.add(message);
    }
    
    public List<String> getScannerErrors()
    {
    	return(scanner_errors);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FullConditionalScanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 210) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { /* throw new Error("Illegal character <"+ yytext()+">");*/
		    		String scannerStateStr = "initial";
		    		switch (yystate() ) {
		    			case YYINITIAL:    scannerStateStr = "initial";      break;
		    			case STARTSPEC:    scannerStateStr = "startspec";    break;
		    			case STRING:       scannerStateStr = "string";       break;
		    			case CONDITIONAL:  scannerStateStr = "conditional";  break; 
		    			case SUBFIELDSPEC: scannerStateStr = "subfield";     break;
		    			case CUSTOMSPEC:   scannerStateStr = "customspec";   break;
		    			case CUSTOMMETHOD: scannerStateStr = "custommethod"; break;
		    			case CUSTOMPARAM:  scannerStateStr = "customparam";  break;
		    			case MAPSPEC:      scannerStateStr = "mapspec";      break;
		    			default:           scannerStateStr = "unknown";      break; 
		    		}
		    		error("Error: Illegal character <"+ yytext()+">  found in scanner state "+ scannerStateStr);
          }
        case 57: break;
        case 2: 
          { /* ignore */
          }
        case 58: break;
        case 3: 
          { return sf.newSymbol("FIELDNAME", FullSym.FIELDNAME, yytext());
          }
        case 59: break;
        case 4: 
          { return sf.newSymbol(",", FullSym.COMMA);
          }
        case 60: break;
        case 5: 
          { yybegin(STARTSPEC); return sf.newSymbol("EQU", FullSym.EQU );
          }
        case 61: break;
        case 6: 
          { /* ignore as comment */
          }
        case 62: break;
        case 7: 
          { yybegin(MAPSPEC);      return sf.newSymbol(",", FullSym.COMMA);
          }
        case 63: break;
        case 8: 
          { return sf.newSymbol("{",FullSym.LBRACE);
          }
        case 64: break;
        case 9: 
          { yybegin(STARTSPEC);    return sf.newSymbol(":",FullSym.COLON);
          }
        case 65: break;
        case 10: 
          { yybegin(CONDITIONAL);  return sf.newSymbol("?",FullSym.QUESTION);
          }
        case 66: break;
        case 11: 
          { save_zzLexicalState = CONSTANT; string.setLength(0); yybegin(STRING);
          }
        case 67: break;
        case 12: 
          { string.append( yytext() );
          }
        case 68: break;
        case 13: 
          { yybegin(save_zzLexicalState); 
                                   return sf.newSymbol("QUOTEDSTR",FullSym.QUOTEDSTR,string.toString());
          }
        case 69: break;
        case 14: 
          { string.append('\\');
          }
        case 70: break;
        case 15: 
          { return sf.newSymbol("NUMBER",FullSym.NUMBER, yytext());
          }
        case 71: break;
        case 16: 
          { return sf.newSymbol("EQU",FullSym.EQU );
          }
        case 72: break;
        case 17: 
          { yybegin(STARTSPEC);  return sf.newSymbol(":", FullSym.COLON);
          }
        case 73: break;
        case 18: 
          { string.setLength(0); save_zzLexicalState = CONDITIONAL; yybegin(STRING);
          }
        case 74: break;
        case 19: 
          { return sf.newSymbol("OR",FullSym.OR);
          }
        case 75: break;
        case 20: 
          { return sf.newSymbol("(",FullSym.LPAREN);
          }
        case 76: break;
        case 21: 
          { return sf.newSymbol(")",FullSym.RPAREN);
          }
        case 77: break;
        case 22: 
          { yybegin(STARTSPEC);  return sf.newSymbol("}", FullSym.RBRACE);
          }
        case 78: break;
        case 23: 
          { return sf.newSymbol("NOT",FullSym.NOT);
          }
        case 79: break;
        case 24: 
          { return sf.newSymbol("MATCH",FullSym.MATCH);
          }
        case 80: break;
        case 25: 
          { return sf.newSymbol("LE",FullSym.LT);
          }
        case 81: break;
        case 26: 
          { return sf.newSymbol("GT",FullSym.GT);
          }
        case 82: break;
        case 27: 
          { return sf.newSymbol("AND",FullSym.AND);
          }
        case 83: break;
        case 28: 
          { return sf.newSymbol("SUBFIELDSPEC",FullSym.SUBFIELDSPEC, yytext());
          }
        case 84: break;
        case 29: 
          { yybegin(MAPSPEC);  return sf.newSymbol(",", FullSym.COMMA);
          }
        case 85: break;
        case 30: 
          { yybegin(STARTSPEC);   return sf.newSymbol(":",FullSym.COLON);
          }
        case 86: break;
        case 31: 
          { yybegin(CONDITIONAL); return sf.newSymbol("?",FullSym.QUESTION);
          }
        case 87: break;
        case 32: 
          { yybegin(STARTSPEC);   return sf.newSymbol("}",FullSym.RBRACE);
          }
        case 88: break;
        case 33: 
          { yybegin(CUSTOMMETHOD); return sf.newSymbol(",", FullSym.COMMA);
          }
        case 89: break;
        case 34: 
          { yybegin(MAPSPEC); return sf.newSymbol(",", FullSym.COMMA);
          }
        case 90: break;
        case 35: 
          { yybegin(CUSTOMPARAM); return sf.newSymbol("(",FullSym.LPAREN);
          }
        case 91: break;
        case 36: 
          { save_zzLexicalState = CUSTOMPARAM; string.setLength(0); yybegin(STRING);
          }
        case 92: break;
        case 37: 
          { yybegin(MAPSPEC); return sf.newSymbol(")",FullSym.RPAREN);
          }
        case 93: break;
        case 38: 
          { string.append('\r');
          }
        case 94: break;
        case 39: 
          { string.append('\n');
          }
        case 95: break;
        case 40: 
          { string.append('\t');
          }
        case 96: break;
        case 41: 
          { string.append('\"');
          }
        case 97: break;
        case 42: 
          { return sf.newSymbol("SUBFIELD",FullSym.SUBFIELD, yytext().substring(1,2));
          }
        case 98: break;
        case 43: 
          { return sf.newSymbol("NEQ",FullSym.NEQ);
          }
        case 99: break;
        case 44: 
          { return sf.newSymbol("IDENTIFIER", FullSym.IDENTIFIER, yytext());
          }
        case 100: break;
        case 45: 
          { yybegin(SUBFIELDSPEC); return sf.newSymbol("FIELDSPEC",FullSym.FIELDSPEC, yytext());
          }
        case 101: break;
        case 46: 
          { yybegin(MAPSPEC);      return sf.newSymbol("FULLRECORD", FullSym.FULLRECORD, yytext());
          }
        case 102: break;
        case 47: 
          { return sf.newSymbol("FIELDSPEC", FullSym.FIELDSPEC, yytext());
          }
        case 103: break;
        case 48: 
          { return sf.newSymbol("POSITION", FullSym.POSITION, yytext());
          }
        case 104: break;
        case 49: 
          { return sf.newSymbol("CHAR",FullSym.CHAR, yytext().substring(1, 2));
          }
        case 105: break;
        case 50: 
          { yybegin(CUSTOMSPEC);   return sf.newSymbol("JAVA", FullSym.JAVA );
          }
        case 106: break;
        case 51: 
          { yybegin(MAPSPEC);      return sf.newSymbol("DATE", FullSym.DATE, yytext());
          }
        case 107: break;
        case 52: 
          { error("Illegal indicator specification <"+ yytext()+">");
          }
        case 108: break;
        case 53: 
          { return sf.newSymbol("IND",FullSym.IND, yytext().substring(3,4));
          }
        case 109: break;
        case 54: 
          { return sf.newSymbol("CHAR",FullSym.CHAR, yytext().substring(1, 3));
          }
        case 110: break;
        case 55: 
          { yybegin(CUSTOMSPEC);   return sf.newSymbol("SCRIPT", FullSym.SCRIPT );
          }
        case 111: break;
        case 56: 
          { yybegin(CUSTOMSPEC);   return sf.newSymbol("CUSTOM", FullSym.CUSTOM );
          }
        case 112: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case STRING: {
              yybegin(save_zzLexicalState); error("Error: End of input encountered in quoted string: "+ string.toString());
            }
            case 178: break;
            default:
              {      return sf.newSymbol("EOF", FullSym.EOF);
 }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
