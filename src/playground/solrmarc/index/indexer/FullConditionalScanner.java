/* The following code was generated by JFlex 1.6.0 */

package playground.solrmarc.index.indexer;

import java.util.List;
import java.util.ArrayList;
import playground.solrmarc.index.utils.StringReader;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.Location;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>C:/Users/rh9ec/Development/Projects/SolrMarc3.0-Github/src/playground/solrmarc/index/indexer/FullScanner.lex</tt>
 */
public class FullConditionalScanner extends playground.solrmarc.index.indexer.FullSym implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STARTSPEC = 2;
  public static final int STRING = 4;
  public static final int CONDITIONAL = 6;
  public static final int SUBFIELDSPEC = 8;
  public static final int CUSTOMSPEC = 10;
  public static final int CUSTOMMETHOD = 12;
  public static final int CUSTOMPARAM = 14;
  public static final int MAPSPEC = 16;
  public static final int CONSTANT = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,  8,  8, 
     9,  9, 10, 10
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\4\1\46\1\47\1\3\22\0\1\5\1\74\1\62"+
    "\1\50\1\72\1\0\1\102\1\103\1\64\1\65\2\0\1\44\1\43"+
    "\2\7\1\1\1\73\1\22\7\2\1\56\1\0\1\77\1\45\1\101"+
    "\1\57\1\0\1\32\2\55\1\33\1\55\1\25\2\55\1\41\1\55"+
    "\1\54\1\52\1\55\1\53\1\34\1\36\1\55\1\27\4\55\1\100"+
    "\3\55\1\66\1\104\1\70\1\67\1\42\1\0\1\14\1\37\1\30"+
    "\1\31\1\24\1\35\1\6\1\76\1\40\1\16\1\6\1\12\1\11"+
    "\1\21\1\20\1\60\1\6\1\13\1\17\1\23\1\26\1\61\1\15"+
    "\1\10\2\6\1\51\1\63\1\71\1\75\6\0\1\46\u1fa2\0\1\46"+
    "\1\46\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\1\1\2\2\1\3\1\4\1\5\1\6\14\1"+
    "\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\2\17\5\1\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\1\1\27\1\1\1\30\1\31\1\32"+
    "\1\33\1\34\1\1\1\35\1\36\1\37\1\1\1\40"+
    "\1\1\1\41\1\42\1\43\1\17\1\44\1\45\1\1"+
    "\16\0\1\46\1\47\1\50\1\51\6\0\1\21\1\24"+
    "\1\0\1\52\1\53\1\34\4\0\1\54\1\0\1\54"+
    "\1\55\1\56\11\0\1\55\1\57\6\0\1\60\1\61"+
    "\1\0\1\35\1\54\1\62\1\56\3\0\1\63\7\0"+
    "\1\64\1\65\1\0\1\66\1\54\12\0\1\54\1\67"+
    "\1\0\1\70\7\0\1\54\15\0\1\71\1\54\5\0"+
    "\1\54\3\0\1\63\1\72\3\0\1\56\12\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u02f7\0\u0381\0\u02f7"+
    "\0\u02f7\0\u03c6\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564"+
    "\0\u05a9\0\u05ee\0\u0633\0\u0678\0\u06bd\0\u0702\0\u02f7\0\u02f7"+
    "\0\u0747\0\u02f7\0\u02f7\0\u02f7\0\u078c\0\u02f7\0\u07d1\0\u0816"+
    "\0\u085b\0\u08a0\0\u08e5\0\u092a\0\u096f\0\u09b4\0\u02f7\0\u09f9"+
    "\0\u02f7\0\u02f7\0\u0a3e\0\u02f7\0\u02f7\0\u0a83\0\u02f7\0\u0ac8"+
    "\0\u0b0d\0\u02f7\0\u02f7\0\u02f7\0\u0b52\0\u0b97\0\u0bdc\0\u02f7"+
    "\0\u02f7\0\u0c21\0\u02f7\0\u0c66\0\u02f7\0\u02f7\0\u02f7\0\u0c66"+
    "\0\u02f7\0\u02f7\0\u0cab\0\u0cf0\0\u0d35\0\u0d7a\0\u0dbf\0\u0e04"+
    "\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7\0\u102c"+
    "\0\u1071\0\u02f7\0\u02f7\0\u02f7\0\u02f7\0\u10b6\0\u10fb\0\u1140"+
    "\0\u1185\0\u11ca\0\u120f\0\u02f7\0\u02f7\0\u1254\0\u02f7\0\u02f7"+
    "\0\u02f7\0\u1299\0\u12de\0\u1323\0\u1368\0\u0c66\0\u0c66\0\u13ad"+
    "\0\u02f7\0\u02f7\0\u13f2\0\u1437\0\u147c\0\u14c1\0\u1506\0\u154b"+
    "\0\u1590\0\u15d5\0\u161a\0\u165f\0\u02f7\0\u16a4\0\u16e9\0\u172e"+
    "\0\u1773\0\u17b8\0\u17fd\0\u02f7\0\u02f7\0\u1842\0\u02f7\0\u1887"+
    "\0\u02f7\0\u18cc\0\u1911\0\u1956\0\u199b\0\u19e0\0\u19e0\0\u1a25"+
    "\0\u040b\0\u1a6a\0\u1aaf\0\u1af4\0\u1b39\0\u02f7\0\u02f7\0\u1b7e"+
    "\0\u02f7\0\u1bc3\0\u1c08\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c\0\u1d61"+
    "\0\u1da6\0\u1deb\0\u1e30\0\u1e75\0\u1eba\0\u02f7\0\u1eff\0\u02f7"+
    "\0\u1f44\0\u1f89\0\u1fce\0\u2013\0\u2058\0\u209d\0\u20e2\0\u2127"+
    "\0\u216c\0\u21b1\0\u21f6\0\u223b\0\u2280\0\u22c5\0\u230a\0\u234f"+
    "\0\u2394\0\u23d9\0\u241e\0\u2463\0\u24a8\0\u02f7\0\u24ed\0\u2532"+
    "\0\u2577\0\u25bc\0\u2601\0\u2646\0\u268b\0\u26d0\0\u2715\0\u275a"+
    "\0\u02f7\0\u0c66\0\u279f\0\u27e4\0\u2829\0\u286e\0\u28b3\0\u28f8"+
    "\0\u293d\0\u2982\0\u29c7\0\u2a0c\0\u2a51\0\u2a96\0\u2adb\0\u2b20";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\14\1\15\2\16\1\17\1\14\12\17\1\14\17\17"+
    "\2\14\1\20\1\21\1\14\1\16\2\14\4\17\2\14"+
    "\2\17\14\14\1\17\1\14\1\17\7\14\1\15\2\16"+
    "\1\17\1\14\12\17\1\14\17\17\2\14\1\20\1\21"+
    "\1\14\1\16\1\22\1\14\4\17\2\14\2\17\14\14"+
    "\1\17\1\14\1\17\5\14\2\23\1\15\2\16\2\14"+
    "\1\24\2\14\1\25\2\14\1\26\1\27\2\14\1\23"+
    "\1\30\1\14\1\31\1\14\1\32\1\33\1\34\1\32"+
    "\1\35\1\32\1\14\1\32\1\14\1\36\1\32\2\14"+
    "\1\37\2\14\1\16\1\14\1\40\1\41\3\32\1\42"+
    "\1\43\2\14\1\44\10\14\1\23\4\14\1\32\4\14"+
    "\3\45\2\14\55\45\1\46\21\45\1\47\1\14\1\50"+
    "\1\51\1\15\2\16\3\14\1\52\5\14\1\53\2\14"+
    "\1\51\1\14\1\54\3\14\1\55\7\14\1\56\3\14"+
    "\1\57\1\60\1\14\1\16\6\14\1\61\3\14\1\62"+
    "\1\63\1\64\1\65\1\66\2\14\1\67\1\70\1\51"+
    "\1\71\1\72\1\14\1\73\1\14\1\74\1\75\1\76"+
    "\4\14\1\15\2\16\1\77\1\14\12\77\1\14\2\77"+
    "\1\14\1\77\1\14\2\77\3\14\1\77\1\14\2\77"+
    "\3\14\1\57\2\14\1\16\6\14\1\100\1\101\2\77"+
    "\4\14\1\102\2\14\1\103\4\14\1\77\7\14\2\104"+
    "\1\15\2\16\1\104\1\14\32\104\2\14\1\105\2\14"+
    "\1\16\2\14\4\104\2\14\2\104\2\14\1\64\1\65"+
    "\5\14\1\104\2\14\1\104\1\14\1\104\5\14\2\104"+
    "\1\15\2\16\1\104\1\14\32\104\2\14\1\106\2\14"+
    "\1\16\2\14\4\104\2\14\2\104\2\14\1\107\6\14"+
    "\1\104\2\14\1\104\1\14\1\104\5\14\2\110\1\15"+
    "\2\16\1\104\1\14\12\104\1\110\17\104\2\14\1\20"+
    "\2\14\1\16\2\14\4\104\2\14\2\104\1\111\1\14"+
    "\1\64\1\112\5\14\1\110\2\14\1\104\1\14\1\104"+
    "\5\14\2\104\1\15\2\16\1\104\1\14\20\104\1\113"+
    "\11\104\2\14\1\20\2\14\1\16\2\14\4\104\2\14"+
    "\2\104\2\14\1\107\1\65\5\14\1\104\2\14\1\104"+
    "\1\14\1\104\7\14\1\15\2\16\36\14\1\57\2\14"+
    "\1\16\12\14\1\44\1\63\21\14\111\0\1\16\101\0"+
    "\2\17\3\0\1\17\1\0\34\17\6\0\4\17\2\0"+
    "\2\17\11\0\1\17\2\0\1\17\1\0\1\17\4\0"+
    "\3\22\2\0\41\22\2\0\35\22\1\0\2\114\17\0"+
    "\1\114\50\0\1\114\22\0\1\115\107\0\1\116\104\0"+
    "\1\117\2\0\1\120\115\0\1\121\100\0\1\122\105\0"+
    "\1\123\1\124\1\123\2\0\3\123\1\0\1\123\2\0"+
    "\1\123\10\0\4\123\22\0\1\123\31\0\1\123\1\0"+
    "\1\123\2\0\3\123\1\0\1\123\2\0\1\123\10\0"+
    "\4\123\22\0\1\123\32\0\1\125\72\0\1\126\104\0"+
    "\1\127\10\0\1\123\1\0\1\123\2\0\3\123\1\0"+
    "\1\123\2\0\1\123\10\0\4\123\22\0\1\123\25\0"+
    "\1\130\110\0\1\123\1\0\1\123\2\0\3\123\1\0"+
    "\1\123\2\0\1\123\10\0\1\123\1\131\2\123\22\0"+
    "\1\123\4\0\3\45\2\0\55\45\1\0\21\45\14\0"+
    "\1\132\5\0\1\133\1\0\1\134\36\0\1\135\23\0"+
    "\1\136\104\0\2\51\17\0\1\51\50\0\1\51\25\0"+
    "\1\137\113\0\1\140\102\0\1\141\103\0\1\142\105\0"+
    "\1\143\130\0\1\144\122\0\1\145\22\0\2\146\17\0"+
    "\1\146\50\0\1\146\12\0\2\147\3\0\1\147\1\0"+
    "\32\147\10\0\4\147\2\0\2\147\11\0\1\147\2\0"+
    "\1\147\1\0\1\147\51\0\1\150\141\0\1\151\2\0"+
    "\104\152\1\153\1\0\2\77\3\0\1\77\1\0\15\77"+
    "\1\0\1\77\1\0\2\77\3\0\1\77\1\0\2\77"+
    "\17\0\2\77\11\0\1\77\2\0\1\77\7\0\2\146"+
    "\3\0\1\154\1\0\12\154\1\146\2\154\1\0\1\154"+
    "\1\0\2\154\3\0\1\154\1\0\2\154\17\0\2\154"+
    "\5\0\1\155\3\0\1\146\2\0\1\154\7\0\2\156"+
    "\3\0\1\156\1\157\32\156\1\157\7\0\4\156\2\0"+
    "\2\156\11\0\1\156\2\0\1\156\1\0\1\156\3\0"+
    "\1\157\1\0\2\156\3\0\1\156\1\157\16\156\1\160"+
    "\13\156\1\157\7\0\4\156\2\0\2\156\11\0\1\156"+
    "\2\0\1\156\1\0\1\156\3\0\1\157\1\0\2\161"+
    "\17\0\1\161\50\0\1\161\23\0\1\162\107\0\1\162"+
    "\150\0\1\163\43\0\1\164\77\0\1\165\101\0\1\166"+
    "\121\0\1\161\1\0\1\161\2\0\3\161\1\0\1\161"+
    "\2\0\1\161\10\0\4\161\22\0\1\161\16\0\1\167"+
    "\111\0\1\170\110\0\1\171\104\0\1\172\112\0\1\173"+
    "\100\0\1\161\1\0\1\161\2\0\3\161\1\0\1\161"+
    "\2\0\1\161\10\0\2\161\1\174\1\161\22\0\1\161"+
    "\5\0\2\175\17\0\1\175\50\0\1\175\34\0\1\176"+
    "\75\0\1\177\121\0\1\200\74\0\1\201\114\0\1\202"+
    "\54\0\2\146\17\0\1\146\20\0\1\203\24\0\1\204"+
    "\2\0\1\146\114\0\1\205\1\0\3\206\2\0\41\206"+
    "\2\0\35\206\1\0\2\154\3\0\1\154\1\0\15\154"+
    "\1\0\1\154\1\0\2\154\3\0\1\154\1\0\2\154"+
    "\2\0\1\154\14\0\2\154\6\0\1\207\2\0\1\154"+
    "\2\0\1\154\14\0\1\154\1\0\12\154\1\0\2\154"+
    "\1\0\1\154\1\0\2\154\3\0\1\154\1\0\2\154"+
    "\17\0\2\154\14\0\1\154\7\0\2\156\3\0\1\156"+
    "\1\157\7\156\1\210\22\156\1\157\7\0\4\156\2\0"+
    "\2\156\11\0\1\156\2\0\1\156\1\0\1\156\3\0"+
    "\1\157\14\0\1\211\111\0\1\212\123\0\1\213\67\0"+
    "\1\162\73\0\1\214\115\0\1\215\105\0\1\216\104\0"+
    "\1\217\104\0\1\220\61\0\2\221\17\0\1\221\50\0"+
    "\1\221\41\0\1\222\67\0\1\223\110\0\1\224\110\0"+
    "\1\225\62\0\2\226\17\0\1\227\50\0\1\227\12\0"+
    "\2\230\17\0\1\230\50\0\1\230\114\0\1\231\2\0"+
    "\2\156\3\0\1\156\1\157\13\156\1\232\16\156\1\157"+
    "\7\0\4\156\2\0\2\156\11\0\1\156\2\0\1\156"+
    "\1\0\1\156\3\0\1\157\22\0\1\162\142\0\1\233"+
    "\53\0\1\234\75\0\1\235\113\0\1\236\4\0\1\237"+
    "\60\0\1\240\172\0\1\241\31\0\1\242\161\0\1\243"+
    "\20\0\1\244\71\0\2\230\17\0\1\230\45\0\1\204"+
    "\2\0\1\230\12\0\2\156\3\0\1\156\1\157\10\156"+
    "\1\245\21\156\1\157\7\0\4\156\2\0\2\156\11\0"+
    "\1\156\2\0\1\156\1\0\1\156\3\0\1\157\23\0"+
    "\1\246\105\0\1\247\71\0\1\250\117\0\1\251\115\0"+
    "\1\252\111\0\1\253\66\0\1\254\77\0\1\255\125\0"+
    "\1\256\104\0\1\257\45\0\2\156\3\0\1\156\1\157"+
    "\1\156\1\260\30\156\1\157\7\0\4\156\2\0\2\156"+
    "\11\0\1\156\2\0\1\156\1\0\1\156\3\0\1\157"+
    "\30\0\1\261\104\0\1\262\112\0\1\263\77\0\1\264"+
    "\72\0\1\72\165\0\1\265\27\0\1\266\102\0\1\267"+
    "\64\0\2\156\3\0\1\156\1\157\32\156\1\270\7\0"+
    "\4\156\2\0\2\156\11\0\1\156\2\0\1\156\1\0"+
    "\1\156\3\0\1\157\20\0\1\271\104\0\1\272\112\0"+
    "\1\273\72\0\1\274\130\0\1\275\142\0\1\74\25\0"+
    "\1\276\66\0\2\156\3\0\1\156\1\157\1\156\1\277"+
    "\30\156\1\157\7\0\4\156\2\0\2\156\11\0\1\156"+
    "\2\0\1\156\1\0\1\156\3\0\1\157\13\0\1\300"+
    "\104\0\1\301\130\0\1\302\70\0\1\303\104\0\1\304"+
    "\62\0\2\156\3\0\1\156\1\157\4\156\1\305\25\156"+
    "\1\157\7\0\4\156\2\0\2\156\11\0\1\156\2\0"+
    "\1\156\1\0\1\156\3\0\1\157\31\0\1\306\104\0"+
    "\1\307\65\0\1\310\116\0\1\311\156\0\1\73\7\0"+
    "\2\156\3\0\1\156\1\157\32\156\1\157\7\0\4\156"+
    "\2\0\1\312\1\156\11\0\1\156\2\0\1\156\1\0"+
    "\1\156\3\0\1\157\32\0\1\313\113\0\1\314\103\0"+
    "\1\315\63\0\1\316\106\0\1\317\113\0\1\320\55\0"+
    "\2\316\3\0\1\316\1\0\32\316\10\0\4\316\2\0"+
    "\2\316\11\0\1\316\2\0\1\316\1\0\1\316\35\0"+
    "\1\321\67\0\1\322\114\0\1\323\103\0\1\324\71\0"+
    "\1\325\134\0\1\326\70\0\1\327\100\0\1\330\115\0"+
    "\1\311\74\0\1\311\63\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11109];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\1\11\1\1\1\11\1\1\2\11\15\1\2\11"+
    "\1\1\3\11\1\1\1\11\10\1\1\11\1\1\2\11"+
    "\1\1\2\11\1\1\1\11\2\1\3\11\3\1\2\11"+
    "\1\1\1\11\1\1\3\11\1\1\2\11\1\1\16\0"+
    "\4\11\6\0\2\11\1\0\3\11\4\0\1\1\1\0"+
    "\1\1\2\11\11\0\1\1\1\11\6\0\2\11\1\0"+
    "\1\11\1\1\1\11\1\1\3\0\1\1\7\0\2\11"+
    "\1\0\1\11\1\1\12\0\1\1\1\11\1\0\1\11"+
    "\7\0\1\1\15\0\1\11\1\1\5\0\1\1\3\0"+
    "\1\11\1\1\3\0\1\1\12\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    int save_zzLexicalState;
    
    List<String> scanner_errors = null;
    StringBuilder string = new StringBuilder();
    public FullConditionalScanner(ComplexSymbolFactory sf)
    {
		this(new StringReader(""));
		this.sf = sf;
		scanner_errors = new ArrayList<String>();
    }
    
    ComplexSymbolFactory sf;
    
    public void startParse(String strToParse)
    {
        yyreset(new StringReader(strToParse));
        scanner_errors = new ArrayList<String>();
    }
    
    private void error(String message) 
    {
        scanner_errors.add(message);
    }
    
    public List<String> getScannerErrors()
    {
    	return(scanner_errors);
    }
    
    private Symbol symbol(String name, int sym) 
    {
        return sf.newSymbol(name, sym, new Location(yyline+1, yycolumn+1, yychar), new Location(yyline+1, yycolumn+yylength(), yychar+yylength()));
    }

    private Symbol symbol(String name, int sym, Object val)
    {
        Location left = new Location(yyline+1,yycolumn+1,yychar);
        Location right= new Location(yyline+1,yycolumn+yylength(), yychar+yylength());
        return sf.newSymbol(name, sym, left, right,val);
    }
      


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FullConditionalScanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 216) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { /* throw new Error("Illegal character <"+ yytext()+">");*/
		    		String scannerStateStr = "initial";
		    		switch (yystate() ) {
		    			case YYINITIAL:    scannerStateStr = "initial";      break;
		    			case STARTSPEC:    scannerStateStr = "startspec";    break;
		    			case STRING:       scannerStateStr = "string";       break;
		    			case CONDITIONAL:  scannerStateStr = "conditional";  break; 
		    			case SUBFIELDSPEC: scannerStateStr = "subfield";     break;
		    			case CUSTOMSPEC:   scannerStateStr = "customspec";   break;
		    			case CUSTOMMETHOD: scannerStateStr = "custommethod"; break;
		    			case CUSTOMPARAM:  scannerStateStr = "customparam";  break;
		    			case MAPSPEC:      scannerStateStr = "mapspec";      break;
		    			default:           scannerStateStr = "unknown";      break; 
		    		}
		    		error("Error: Illegal character <"+ yytext()+">  found in scanner state "+ scannerStateStr);
          }
        case 59: break;
        case 2: 
          { /* ignore */
          }
        case 60: break;
        case 3: 
          { return symbol("FIELDNAME", FullSym.FIELDNAME, yytext());
          }
        case 61: break;
        case 4: 
          { return symbol(",", FullSym.COMMA);
          }
        case 62: break;
        case 5: 
          { yybegin(STARTSPEC); return symbol("EQU", FullSym.EQU );
          }
        case 63: break;
        case 6: 
          { /* ignore as comment */
          }
        case 64: break;
        case 7: 
          { yybegin(MAPSPEC);      return symbol(",", FullSym.COMMA);
          }
        case 65: break;
        case 8: 
          { return symbol("{",FullSym.LBRACE);
          }
        case 66: break;
        case 9: 
          { yybegin(STARTSPEC);    return symbol(":",FullSym.COLON);
          }
        case 67: break;
        case 10: 
          { yybegin(CONDITIONAL);  return symbol("?",FullSym.QUESTION);
          }
        case 68: break;
        case 11: 
          { save_zzLexicalState = CONSTANT; string.setLength(0); yybegin(STRING);
          }
        case 69: break;
        case 12: 
          { string.append( yytext() );
          }
        case 70: break;
        case 13: 
          { yybegin(save_zzLexicalState); 
                                   return symbol("QUOTEDSTR",FullSym.QUOTEDSTR,string.toString());
          }
        case 71: break;
        case 14: 
          { string.append('\\');
          }
        case 72: break;
        case 15: 
          { return symbol("NUMBER",FullSym.NUMBER, yytext());
          }
        case 73: break;
        case 16: 
          { yybegin(MAPSPEC);  return symbol(",", FullSym.COMMA);
          }
        case 74: break;
        case 17: 
          { return symbol("EQU",FullSym.EQU );
          }
        case 75: break;
        case 18: 
          { yybegin(STARTSPEC);  return symbol(":", FullSym.COLON);
          }
        case 76: break;
        case 19: 
          { string.setLength(0); save_zzLexicalState = CONDITIONAL; yybegin(STRING);
          }
        case 77: break;
        case 20: 
          { return symbol("OR",FullSym.OR);
          }
        case 78: break;
        case 21: 
          { return symbol("(",FullSym.LPAREN);
          }
        case 79: break;
        case 22: 
          { return symbol(")",FullSym.RPAREN);
          }
        case 80: break;
        case 23: 
          { yybegin(STARTSPEC);  return symbol("}", FullSym.RBRACE);
          }
        case 81: break;
        case 24: 
          { return symbol("NOT",FullSym.NOT);
          }
        case 82: break;
        case 25: 
          { return symbol("MATCH",FullSym.MATCH);
          }
        case 83: break;
        case 26: 
          { return symbol("LE",FullSym.LT);
          }
        case 84: break;
        case 27: 
          { return symbol("GT",FullSym.GT);
          }
        case 85: break;
        case 28: 
          { return symbol("AND",FullSym.AND);
          }
        case 86: break;
        case 29: 
          { return symbol("SUBFIELDSPEC",FullSym.SUBFIELDSPEC, yytext());
          }
        case 87: break;
        case 30: 
          { yybegin(STARTSPEC);   return symbol(":",FullSym.COLON);
          }
        case 88: break;
        case 31: 
          { yybegin(CONDITIONAL); return symbol("?",FullSym.QUESTION);
          }
        case 89: break;
        case 32: 
          { yybegin(STARTSPEC);   return symbol("}",FullSym.RBRACE);
          }
        case 90: break;
        case 33: 
          { yybegin(CUSTOMMETHOD); return symbol(",", FullSym.COMMA);
          }
        case 91: break;
        case 34: 
          { yybegin(MAPSPEC); return symbol(",", FullSym.COMMA);
          }
        case 92: break;
        case 35: 
          { yybegin(CUSTOMPARAM); return symbol("(",FullSym.LPAREN);
          }
        case 93: break;
        case 36: 
          { save_zzLexicalState = CUSTOMPARAM; string.setLength(0); yybegin(STRING);
          }
        case 94: break;
        case 37: 
          { yybegin(MAPSPEC); return symbol(")",FullSym.RPAREN);
          }
        case 95: break;
        case 38: 
          { string.append('\r');
          }
        case 96: break;
        case 39: 
          { string.append('\n');
          }
        case 97: break;
        case 40: 
          { string.append('\t');
          }
        case 98: break;
        case 41: 
          { string.append('\"');
          }
        case 99: break;
        case 42: 
          { return symbol("SUBFIELD",FullSym.SUBFIELD, yytext().substring(1,2));
          }
        case 100: break;
        case 43: 
          { return symbol("NEQ",FullSym.NEQ);
          }
        case 101: break;
        case 44: 
          { return symbol("IDENTIFIER", FullSym.IDENTIFIER, yytext());
          }
        case 102: break;
        case 45: 
          { yybegin(SUBFIELDSPEC); return symbol("FIELDSPEC",FullSym.FIELDSPEC, yytext());
          }
        case 103: break;
        case 46: 
          { yybegin(MAPSPEC);      return symbol("FULLRECORD", FullSym.FULLRECORD, yytext());
          }
        case 104: break;
        case 47: 
          { return symbol("FIELDSPEC", FullSym.FIELDSPEC, yytext());
          }
        case 105: break;
        case 48: 
          { return symbol("POSITION", FullSym.POSITION, yytext());
          }
        case 106: break;
        case 49: 
          { return symbol("CHAR",FullSym.CHAR, yytext().substring(1, 2));
          }
        case 107: break;
        case 50: 
          { yybegin(CUSTOMSPEC);   return symbol("JAVA", FullSym.JAVA, yytext() );
          }
        case 108: break;
        case 51: 
          { yybegin(MAPSPEC);      return symbol("DATE", FullSym.DATE, yytext());
          }
        case 109: break;
        case 52: 
          { error("Illegal indicator specification <"+ yytext()+">");
          }
        case 110: break;
        case 53: 
          { return symbol("IND",FullSym.IND, yytext().substring(3,4));
          }
        case 111: break;
        case 54: 
          { return symbol("CHAR",FullSym.CHAR, yytext().substring(1, 3));
          }
        case 112: break;
        case 55: 
          { yybegin(CUSTOMSPEC);   return symbol("SCRIPT", FullSym.SCRIPT, yytext() );
          }
        case 113: break;
        case 56: 
          { yybegin(CUSTOMSPEC);   return symbol("CUSTOM", FullSym.CUSTOM, yytext() );
          }
        case 114: break;
        case 57: 
          { return symbol("CONTAINS",FullSym.CONTAINS);
          }
        case 115: break;
        case 58: 
          { return symbol("CUSTOM_MAP", FullSym.CUSTOM_MAP, yytext());
          }
        case 116: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case STRING: {
              yybegin(save_zzLexicalState); error("Error: End of input encountered in quoted string: "+ string.toString());
            }
            case 217: break;
            default:
              {      return sf.newSymbol("EOF", FullSym.EOF);
 }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
