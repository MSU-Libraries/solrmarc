/* The following code was generated by JFlex 1.6.0 */

package playground.solrmarc.index.specification.conditional;

import java_cup.runtime.SymbolFactory;
import java.util.List;
import java.util.ArrayList;
//import java.io.StringReader;
import playground.solrmarc.index.utils.StringReader;
import java_cup.runtime.ComplexSymbolFactory;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>C:/Users/rh9ec/Development/Projects/SolrMarc3.0-Github/src/playground/solrmarc/index/specification/conditional/Scanner.flex</tt>
 */
public class ConditionalScanner extends playground.solrmarc.index.specification.conditional.sym implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CONDITIONAL = 4;
  public static final int SUBFIELDSPEC = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\6\1\4\1\54\1\55\1\3\22\0\1\6\1\35\1\31"+
    "\1\0\1\24\1\0\1\50\1\52\1\32\1\33\3\0\1\21\2\0"+
    "\1\1\2\30\7\2\1\14\1\5\1\46\1\34\1\47\1\15\1\0"+
    "\12\13\1\12\1\10\1\13\1\11\14\13\1\16\1\53\1\22\1\17"+
    "\2\0\1\40\1\20\1\42\1\27\1\44\2\20\1\43\1\25\3\20"+
    "\1\37\1\26\3\20\1\56\1\45\1\41\6\20\1\7\1\51\1\23"+
    "\1\36\6\0\1\54\u1fa2\0\1\54\1\54\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\2\1\2\2\1\3\2\1\1\4\1\5\1\6"+
    "\1\7\1\10\2\11\1\12\1\1\1\13\2\1\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\1\1\22\1\23"+
    "\1\24\1\25\1\1\1\26\1\27\1\1\1\30\1\31"+
    "\4\0\1\32\1\33\1\34\1\35\1\0\1\36\1\0"+
    "\1\17\1\37\1\0\1\24\1\25\4\0\2\40\1\0"+
    "\1\41\2\0\1\42\1\0\1\30\2\0\1\43\1\44"+
    "\1\0\1\45\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[77];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\274"+
    "\0\274\0\u0149\0\u0178\0\274\0\274\0\u01a7\0\274\0\u01d6"+
    "\0\274\0\u0205\0\274\0\u0234\0\274\0\u0263\0\u0292\0\274"+
    "\0\274\0\274\0\u02c1\0\u02f0\0\274\0\u031f\0\274\0\274"+
    "\0\u034e\0\u037d\0\u03ac\0\274\0\274\0\u03db\0\u040a\0\274"+
    "\0\u0439\0\u0468\0\u0497\0\u04c6\0\274\0\274\0\274\0\274"+
    "\0\u04f5\0\274\0\u0524\0\274\0\274\0\u0553\0\274\0\274"+
    "\0\u0582\0\u05b1\0\u05e0\0\u060f\0\274\0\u063e\0\u066d\0\274"+
    "\0\u069c\0\u06cb\0\274\0\u06fa\0\274\0\353\0\u0729\0\274"+
    "\0\274\0\u0758\0\274\0\u0787\0\u07b6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[77];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\10\1\5\1\10\1\11\1\12"+
    "\3\13\1\14\1\15\12\5\1\6\24\5\1\10\1\5"+
    "\3\16\2\5\24\16\1\17\21\16\1\20\3\16\1\5"+
    "\1\21\1\22\1\7\1\10\1\5\1\10\5\5\1\23"+
    "\1\5\1\24\4\5\1\25\1\26\1\27\2\5\1\22"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\6\5"+
    "\1\37\1\40\1\41\1\42\1\43\2\5\1\10\4\5"+
    "\1\7\1\10\1\5\1\10\5\5\1\44\1\45\1\46"+
    "\1\5\1\47\2\5\1\50\1\5\3\47\7\5\7\47"+
    "\7\5\1\10\1\47\60\0\2\51\25\0\1\51\32\0"+
    "\1\52\62\0\1\53\1\54\2\53\53\0\4\53\43\0"+
    "\3\16\2\0\24\16\1\0\21\16\1\0\3\16\26\0"+
    "\1\55\2\0\1\56\7\0\1\57\14\0\1\60\1\0"+
    "\2\22\25\0\1\22\27\0\2\61\25\0\1\61\27\0"+
    "\2\62\5\0\4\62\4\0\1\62\4\0\4\62\6\0"+
    "\7\62\10\0\1\62\26\0\1\63\64\0\1\64\56\0"+
    "\1\65\62\0\1\66\66\0\1\67\57\0\1\70\5\0"+
    "\53\71\1\72\3\71\1\0\2\61\14\0\1\73\1\74"+
    "\4\0\3\74\1\61\6\0\7\74\10\0\1\74\1\0"+
    "\2\47\15\0\1\47\4\0\4\47\6\0\7\47\10\0"+
    "\1\47\1\0\2\75\25\0\1\75\33\0\1\10\61\0"+
    "\4\75\53\0\2\75\1\76\1\75\44\0\2\61\16\0"+
    "\1\77\1\100\5\0\1\61\55\0\1\101\70\0\1\102"+
    "\67\0\1\103\4\0\3\104\2\0\47\104\2\0\1\104"+
    "\20\0\1\74\4\0\3\74\7\0\7\74\10\0\1\74"+
    "\1\0\2\74\15\0\2\74\1\105\2\0\4\74\6\0"+
    "\7\74\10\0\1\74\1\0\2\106\25\0\1\106\27\0"+
    "\2\107\25\0\1\107\27\0\2\110\25\0\1\111\70\0"+
    "\1\112\66\0\1\113\5\0\2\107\17\0\1\100\5\0"+
    "\1\107\71\0\1\114\57\0\1\115\57\0\1\35\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2021];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\2\1\2\11\2\1\2\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\2\1\3\11"+
    "\2\1\1\11\1\1\2\11\3\1\2\11\2\1\1\11"+
    "\4\0\4\11\1\0\1\11\1\0\2\11\1\0\2\11"+
    "\4\0\1\11\1\1\1\0\1\11\2\0\1\11\1\0"+
    "\1\11\2\0\2\11\1\0\1\11\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[77];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    List<String> scanner_errors = null;
    StringBuilder string = new StringBuilder();
    public ConditionalScanner(ComplexSymbolFactory sf)
    {
		this(new StringReader(""));
		this.sf = sf;
		scanner_errors = new ArrayList<String>();
    }
    
    SymbolFactory sf;
    
    public void startParse(String strToParse)
    {
        yyreset(new StringReader(strToParse));
        scanner_errors = new ArrayList<String>();
    }
    
    private void error(String message) 
    {
        scanner_errors.add(message);
    }
    
    public List<String> getScannerErrors()
    {
    	return(scanner_errors);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ConditionalScanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 166) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { /* throw new Error("Illegal character <"+ yytext()+">");*/
		    		String scannerStateStr = "initial";
		    		switch (yystate() ) {
		    			case YYINITIAL:    scannerStateStr = "initial";     break;
		    			case STRING:       scannerStateStr = "string";      break;
		    			case CONDITIONAL:  scannerStateStr = "conditional"; break; 
		    			case SUBFIELDSPEC: scannerStateStr = "subfield";    break;
		    			default:           scannerStateStr = "unknown";     break; 
		    		}
		    		error("Error: Illegal character <"+ yytext()+">  found in scanner state "+ scannerStateStr);
          }
        case 38: break;
        case 2: 
          { /* ignore */
          }
        case 39: break;
        case 3: 
          { return sf.newSymbol("{",sym.LBRACE);
          }
        case 40: break;
        case 4: 
          { yybegin(YYINITIAL);    return sf.newSymbol(":",sym.COLON);
          }
        case 41: break;
        case 5: 
          { yybegin(CONDITIONAL);  return sf.newSymbol("?",sym.QUESTION);
          }
        case 42: break;
        case 6: 
          { string.append( yytext() );
          }
        case 43: break;
        case 7: 
          { yybegin(CONDITIONAL); 
      return sf.newSymbol("QUOTEDSTR",sym.QUOTEDSTR,string.toString());
          }
        case 44: break;
        case 8: 
          { string.append('\\');
          }
        case 45: break;
        case 9: 
          { return sf.newSymbol("NUMBER",sym.NUMBER, yytext());
          }
        case 46: break;
        case 10: 
          { yybegin(YYINITIAL);  return sf.newSymbol(":",sym.COLON);
          }
        case 47: break;
        case 11: 
          { yybegin(YYINITIAL);  return sf.newSymbol("}",sym.RBRACE);
          }
        case 48: break;
        case 12: 
          { string.setLength(0); yybegin(STRING);
          }
        case 49: break;
        case 13: 
          { return sf.newSymbol("(",sym.LPAREN);
          }
        case 50: break;
        case 14: 
          { return sf.newSymbol(")",sym.RPAREN);
          }
        case 51: break;
        case 15: 
          { return sf.newSymbol("EQU",sym.EQU );
          }
        case 52: break;
        case 16: 
          { return sf.newSymbol("NOT",sym.NOT);
          }
        case 53: break;
        case 17: 
          { return sf.newSymbol("MATCH",sym.MATCH);
          }
        case 54: break;
        case 18: 
          { return sf.newSymbol("LE",sym.LT);
          }
        case 55: break;
        case 19: 
          { return sf.newSymbol("GT",sym.GT);
          }
        case 56: break;
        case 20: 
          { return sf.newSymbol("AND",sym.AND);
          }
        case 57: break;
        case 21: 
          { return sf.newSymbol("OR",sym.OR);
          }
        case 58: break;
        case 22: 
          { yybegin(YYINITIAL);   return sf.newSymbol(":",sym.COLON);
          }
        case 59: break;
        case 23: 
          { yybegin(CONDITIONAL); return sf.newSymbol("?",sym.QUESTION);
          }
        case 60: break;
        case 24: 
          { return sf.newSymbol("SUBFIELDSPEC",sym.SUBFIELDSPEC, yytext());
          }
        case 61: break;
        case 25: 
          { yybegin(YYINITIAL);   return sf.newSymbol("}",sym.RBRACE);
          }
        case 62: break;
        case 26: 
          { string.append('\n');
          }
        case 63: break;
        case 27: 
          { string.append('\"');
          }
        case 64: break;
        case 28: 
          { string.append('\t');
          }
        case 65: break;
        case 29: 
          { string.append('\r');
          }
        case 66: break;
        case 30: 
          { return sf.newSymbol("SUBFIELD",sym.SUBFIELD, yytext().substring(1,2));
          }
        case 67: break;
        case 31: 
          { return sf.newSymbol("NEQ",sym.NEQ);
          }
        case 68: break;
        case 32: 
          { yybegin(SUBFIELDSPEC); return sf.newSymbol("FIELDSPEC",sym.FIELDSPEC, yytext());
          }
        case 69: break;
        case 33: 
          { return sf.newSymbol("POSITION", sym.POSITION, yytext());
          }
        case 70: break;
        case 34: 
          { return sf.newSymbol("CHAR",sym.CHAR, yytext().substring(1, 2));
          }
        case 71: break;
        case 35: 
          { error("Illegal indicator specification <"+ yytext()+">");
          }
        case 72: break;
        case 36: 
          { return sf.newSymbol("IND",sym.IND, yytext().substring(3,4));
          }
        case 73: break;
        case 37: 
          { return sf.newSymbol("CHAR",sym.CHAR, yytext().substring(1, 3));
          }
        case 74: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case STRING: {
              yybegin(CONDITIONAL); error("Error: End of input encountered in quoted string: "+ string.toString());
            }
            case 78: break;
            default:
              {      return sf.newSymbol("EOF", sym.EOF);
 }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
