
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

package playground.solrmarc.index.specification.conditional;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import playground.solrmarc.index.specification.conditional.ConditionalScanner;
import playground.solrmarc.index.specification.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ConditionalParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public ConditionalParser() {super();}

  /** Constructor which sets the default scanner. */
  public ConditionalParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConditionalParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\035\000\002\002\004\000\002\002\005\000\002\002" +
    "\003\000\002\002\003\000\002\003\005\000\002\003\003" +
    "\000\002\004\007\000\002\004\003\000\002\005\006\000" +
    "\002\005\006\000\002\005\005\000\002\005\003\000\002" +
    "\006\004\000\002\006\004\000\002\006\003\000\002\007" +
    "\005\000\002\007\005\000\002\007\004\000\002\007\005" +
    "\000\002\007\003\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\066\000\010\003\006\005\004\024\010\001\002\000" +
    "\004\024\061\001\002\000\006\002\ufff6\004\ufff6\001\002" +
    "\000\006\002\ufffe\004\ufffe\001\002\000\006\002\055\004" +
    "\054\001\002\000\014\002\ufff3\004\ufff3\007\015\025\013" +
    "\026\014\001\002\000\006\002\ufffa\004\ufffa\001\002\000" +
    "\006\002\uffff\004\uffff\001\002\000\010\002\ufff5\004\ufff5" +
    "\007\052\001\002\000\010\002\ufff4\004\ufff4\007\050\001" +
    "\002\000\014\012\016\013\022\022\024\023\017\026\021" +
    "\001\002\000\014\012\016\013\022\022\024\023\017\026" +
    "\021\001\002\000\010\015\027\016\026\021\025\001\002" +
    "\000\014\002\uffee\004\uffee\010\uffee\011\uffee\014\uffee\001" +
    "\002\000\010\015\027\016\026\021\025\001\002\000\014" +
    "\012\016\013\022\022\024\023\017\026\021\001\002\000" +
    "\012\002\ufff7\004\ufff7\010\035\011\036\001\002\000\010" +
    "\015\027\016\026\021\025\001\002\000\010\027\uffe8\030" +
    "\uffe8\031\uffe8\001\002\000\010\027\uffe9\030\uffe9\031\uffe9" +
    "\001\002\000\010\027\uffea\030\uffea\031\uffea\001\002\000" +
    "\010\027\032\030\034\031\031\001\002\000\014\002\uffe5" +
    "\004\uffe5\010\uffe5\011\uffe5\014\uffe5\001\002\000\014\002" +
    "\uffe7\004\uffe7\010\uffe7\011\uffe7\014\uffe7\001\002\000\014" +
    "\002\uffed\004\uffed\010\uffed\011\uffed\014\uffed\001\002\000" +
    "\014\002\uffe6\004\uffe6\010\uffe6\011\uffe6\014\uffe6\001\002" +
    "\000\014\012\016\013\022\022\024\023\017\026\021\001" +
    "\002\000\014\012\016\013\022\022\024\023\017\026\021" +
    "\001\002\000\014\002\ufff1\004\ufff1\010\ufff1\011\ufff1\014" +
    "\ufff1\001\002\000\014\002\ufff2\004\ufff2\010\ufff2\011\036" +
    "\014\ufff2\001\002\000\010\010\035\011\036\014\042\001" +
    "\002\000\014\002\uffef\004\uffef\010\uffef\011\uffef\014\uffef" +
    "\001\002\000\010\027\032\030\034\031\031\001\002\000" +
    "\014\002\uffeb\004\uffeb\010\uffeb\011\uffeb\014\uffeb\001\002" +
    "\000\010\027\032\030\034\031\031\001\002\000\014\002" +
    "\uffec\004\uffec\010\uffec\011\uffec\014\uffec\001\002\000\014" +
    "\002\ufff0\004\ufff0\010\035\011\036\014\ufff0\001\002\000" +
    "\014\012\016\013\022\022\024\023\017\026\021\001\002" +
    "\000\012\002\ufff8\004\ufff8\010\035\011\036\001\002\000" +
    "\014\012\016\013\022\022\024\023\017\026\021\001\002" +
    "\000\012\002\ufff9\004\ufff9\010\035\011\036\001\002\000" +
    "\006\005\004\024\010\001\002\000\004\002\001\001\002" +
    "\000\006\002\000\004\000\001\002\000\006\004\ufffc\006" +
    "\ufffc\001\002\000\006\004\065\006\064\001\002\000\012" +
    "\004\ufff3\006\ufff3\025\062\026\063\001\002\000\006\004" +
    "\ufff5\006\ufff5\001\002\000\006\004\ufff4\006\ufff4\001\002" +
    "\000\004\007\067\001\002\000\004\024\061\001\002\000" +
    "\006\004\ufffd\006\ufffd\001\002\000\014\012\016\013\022" +
    "\022\024\023\017\026\021\001\002\000\012\002\ufffb\004" +
    "\ufffb\010\035\011\036\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\066\000\012\002\006\004\011\005\010\006\004\001" +
    "\001\000\006\003\057\006\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\022\010\017\001\001\000\006\007" +
    "\046\010\017\001\001\000\004\012\044\001\001\000\002" +
    "\001\001\000\004\012\042\001\001\000\006\007\040\010" +
    "\017\001\001\000\002\001\001\000\004\012\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\037\010" +
    "\017\001\001\000\006\007\036\010\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\043\001\001\000\002\001\001\000\004" +
    "\011\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\050\010\017\001\001\000\002\001\001\000\006" +
    "\007\052\010\017\001\001\000\002\001\001\000\010\004" +
    "\055\005\010\006\004\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\065\001\001\000\002\001\001\000\006\007" +
    "\067\010\017\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConditionalParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConditionalParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConditionalParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    static ConditionalScanner scanner;
    static boolean parser_debug;
    static List<String> parser_errors = null;
    public static void setParserDebug(boolean b) { parser_debug = b; } 
    public static boolean shouldParserDebug()    { return(parser_debug); }
    public ConditionalParser(boolean debug) 
    { 
        super(new ComplexSymbolFactory());
        parser_debug = debug;
        this.scanner = new ConditionalScanner((ComplexSymbolFactory)getSymbolFactory());
        this.setScanner(this.scanner);
    }
    
    public Specification parse(String strToParse, boolean debug)
    {
        Symbol parse_tree = null;
        Specification result = null;
        parser_errors = new ArrayList<String>();
        scanner.startParse(strToParse);
        try{
            if (debug)
                parse_tree = this.debug_parse();
            else
                parse_tree = this.parse();
        }
        catch (Exception e) {
            parser_errors.add("Exception "+e.toString());
            //parser_errors.add(" Input Specification "+strToParse);
        } 
        finally {
        }
        if (parse_tree != null) 
        {
            result = (Specification) parse_tree.value;
            if (result != null)
            {
            	result.setSpecLabel(strToParse);
            }
        }
        return(result);     
    }
   
    public Specification parse(String strToParse)
    {
        return(parse(strToParse, parser_debug));
    }
    
    public static final List<String> getErrors()
    {
    	if (scanner.getScannerErrors().size() == 0)
    		return(parser_errors);
    	List<String> allErrors = new ArrayList<String>();
    	allErrors.addAll(parser_errors);
    	allErrors.addAll(scanner.getScannerErrors());
    	return(allErrors);
    }
    
    public static final void addError(String errorMsg)
    {
        parser_errors.add(errorMsg);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ConditionalParser$actions {
  private final ConditionalParser parser;

  /** Constructor */
  CUP$ConditionalParser$actions(ConditionalParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConditionalParser$do_action_part00000000(
    int                        CUP$ConditionalParser$act_num,
    java_cup.runtime.lr_parser CUP$ConditionalParser$parser,
    java.util.Stack            CUP$ConditionalParser$stack,
    int                        CUP$ConditionalParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConditionalParser$result;

      /* select the action based on the action number */
      switch (CUP$ConditionalParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= field_spec EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-1)).xright;
		CompositeSpecification start_val = (CompositeSpecification)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-1)).value;
		RESULT = start_val;
              CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-1)), ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ConditionalParser$parser.done_parsing();
          return CUP$ConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // field_spec ::= field_spec COLON field_spec_part 
            {
              CompositeSpecification RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-2)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-2)).xright;
		CompositeSpecification s = (CompositeSpecification)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-2)).value;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xright;
		CompositeSpecification s1 = (CompositeSpecification)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
		 s.addSpec(s1); RESULT = s; 
              CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec",0, ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), RESULT);
            }
          return CUP$ConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // field_spec ::= field_spec_part 
            {
              CompositeSpecification RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xright;
		CompositeSpecification s = (CompositeSpecification)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
		 RESULT = new CompositeSpecification(s); 
              CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec",0, ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), RESULT);
            }
          return CUP$ConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // field_spec ::= error 
            {
              CompositeSpecification RESULT =null;
		 RESULT = null; 
              CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec",0, ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), RESULT);
            }
          return CUP$ConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // field_spec_simple ::= field_spec_simple COLON field_spec_part_simple 
            {
              CompositeSpecification RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-2)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-2)).xright;
		CompositeSpecification s = (CompositeSpecification)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-2)).value;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xright;
		SingleSpecification s1 = (SingleSpecification)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
		 s.addSpec(s1); RESULT = s; 
              CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_simple",1, ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), RESULT);
            }
          return CUP$ConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // field_spec_simple ::= field_spec_part_simple 
            {
              CompositeSpecification RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xright;
		SingleSpecification s = (SingleSpecification)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
		 RESULT = new CompositeSpecification(s); 
              CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_simple",1, ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), RESULT);
            }
          return CUP$ConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // field_spec_part ::= LBRACE field_spec_simple RBRACE QUESTION expr 
            {
              CompositeSpecification RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-3)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-3)).xright;
		CompositeSpecification s = (CompositeSpecification)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xright;
		Condition e = (Condition)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
		 s.addConditional(e); RESULT = s; 
              CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part",2, ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-4)), ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), RESULT);
            }
          return CUP$ConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // field_spec_part ::= field_spec_part_complex 
            {
              CompositeSpecification RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xright;
		SingleSpecification s = (SingleSpecification)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
		 RESULT = new CompositeSpecification(s); 
              CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part",2, ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), RESULT);
            }
          return CUP$ConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // field_spec_part_complex ::= FIELDSPEC SUBFIELDSPEC QUESTION expr 
            {
              SingleSpecification RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-3)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-3)).xright;
		String f = (String)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-3)).value;
		Location sfxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-2)).xleft;
		Location sfxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-2)).xright;
		String sf = (String)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xright;
		Condition e = (Condition)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
		 RESULT = AbstractSpecificationFactory.makeSingleSpecification(f, sf, e); 
              CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part_complex",3, ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-3)), ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), RESULT);
            }
          return CUP$ConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // field_spec_part_complex ::= FIELDSPEC POSITION QUESTION expr 
            {
              SingleSpecification RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-3)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-3)).xright;
		String f = (String)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-3)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-2)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-2)).xright;
		String p = (String)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xright;
		Condition e = (Condition)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
		 RESULT = AbstractSpecificationFactory.makeSingleSpecification(f, p, e); 
              CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part_complex",3, ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-3)), ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), RESULT);
            }
          return CUP$ConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // field_spec_part_complex ::= FIELDSPEC QUESTION expr 
            {
              SingleSpecification RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-2)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-2)).xright;
		String f = (String)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xright;
		Condition e = (Condition)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
		 RESULT = AbstractSpecificationFactory.makeSingleSpecification(f, null, e); 
              CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part_complex",3, ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), RESULT);
            }
          return CUP$ConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // field_spec_part_complex ::= field_spec_part_simple 
            {
              SingleSpecification RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xright;
		SingleSpecification s = (SingleSpecification)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part_complex",3, ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), RESULT);
            }
          return CUP$ConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // field_spec_part_simple ::= FIELDSPEC SUBFIELDSPEC 
            {
              SingleSpecification RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-1)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-1)).xright;
		String f = (String)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-1)).value;
		Location sfxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xleft;
		Location sfxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xright;
		String sf = (String)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
		 RESULT = AbstractSpecificationFactory.makeSingleSpecification(f, sf); 
              CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part_simple",4, ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-1)), ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), RESULT);
            }
          return CUP$ConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // field_spec_part_simple ::= FIELDSPEC POSITION 
            {
              SingleSpecification RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-1)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-1)).xright;
		String f = (String)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-1)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xright;
		String p = (String)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
		 RESULT = AbstractSpecificationFactory.makeSingleSpecification(f, p); 
              CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part_simple",4, ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-1)), ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), RESULT);
            }
          return CUP$ConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // field_spec_part_simple ::= FIELDSPEC 
            {
              SingleSpecification RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xright;
		String f = (String)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
		 RESULT = AbstractSpecificationFactory.makeSingleSpecification(f, null); 
              CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part_simple",4, ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), RESULT);
            }
          return CUP$ConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= expr AND expr 
            {
              Condition RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-2)).xright;
		Condition e1 = (Condition)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xright;
		Condition e2 = (Condition)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
		 RESULT = new ConditionComposite(e1, e2, sym.AND);  
              CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), RESULT);
            }
          return CUP$ConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr OR expr 
            {
              Condition RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-2)).xright;
		Condition e1 = (Condition)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xright;
		Condition e2 = (Condition)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
		 RESULT = new ConditionComposite(e1, e2, sym.OR);  
              CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), RESULT);
            }
          return CUP$ConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= NOT expr 
            {
              Condition RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xright;
		Condition e = (Condition)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
		 RESULT = new ConditionComposite(e, null, sym.NOT); 
              CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-1)), ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), RESULT);
            }
          return CUP$ConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= LPAREN expr RPAREN 
            {
              Condition RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-1)).xright;
		Condition e = (Condition)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-1)).value;
		 RESULT = e; 
              CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), RESULT);
            }
          return CUP$ConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= expr_part 
            {
              Condition RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xright;
		Condition e = (Condition)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), RESULT);
            }
          return CUP$ConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr_part ::= SUBFIELD op value 
            {
              Condition RESULT =null;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-2)).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-2)).xright;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-2)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-1)).xright;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-1)).value;
		Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xleft;
		Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xright;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
		 RESULT = new ConditionSubfield(s1, s2, ((int)i));
              CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("expr_part",6, ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), RESULT);
            }
          return CUP$ConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr_part ::= IND op value 
            {
              Condition RESULT =null;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-2)).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-2)).xright;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-2)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-1)).xright;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-1)).value;
		Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xleft;
		Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xright;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
		 RESULT = new ConditionIndicator(s1, s2, ((int)i)); 
              CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("expr_part",6, ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), RESULT);
            }
          return CUP$ConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr_part ::= POSITION op value 
            {
              Condition RESULT =null;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-2)).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-2)).xright;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-2)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-1)).xright;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-1)).value;
		Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xleft;
		Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xright;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
		 RESULT = new ConditionPosition(s1, s2, ((int)i)); 
              CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("expr_part",6, ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.elementAt(CUP$ConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), RESULT);
            }
          return CUP$ConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // op ::= EQU 
            {
              Integer RESULT =null;
		 RESULT = new Integer(sym.EQU); 
              CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("op",8, ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), RESULT);
            }
          return CUP$ConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // op ::= NEQ 
            {
              Integer RESULT =null;
		 RESULT = new Integer(sym.NEQ); 
              CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("op",8, ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), RESULT);
            }
          return CUP$ConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // op ::= MATCH 
            {
              Integer RESULT =null;
		 RESULT = new Integer(sym.MATCH); 
              CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("op",8, ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), RESULT);
            }
          return CUP$ConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // value ::= QUOTEDSTR 
            {
              String RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), RESULT);
            }
          return CUP$ConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // value ::= CHAR 
            {
              String RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), RESULT);
            }
          return CUP$ConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // value ::= NUMBER 
            {
              String RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConditionalParser$stack.peek()), RESULT);
            }
          return CUP$ConditionalParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConditionalParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConditionalParser$do_action(
    int                        CUP$ConditionalParser$act_num,
    java_cup.runtime.lr_parser CUP$ConditionalParser$parser,
    java.util.Stack            CUP$ConditionalParser$stack,
    int                        CUP$ConditionalParser$top)
    throws java.lang.Exception
    {
              return CUP$ConditionalParser$do_action_part00000000(
                               CUP$ConditionalParser$act_num,
                               CUP$ConditionalParser$parser,
                               CUP$ConditionalParser$stack,
                               CUP$ConditionalParser$top);
    }
}

}
