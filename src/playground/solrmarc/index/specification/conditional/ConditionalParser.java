
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

package playground.solrmarc.index.specification.conditional;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import playground.solrmarc.index.specification.conditional.ConditionalScanner;
import playground.solrmarc.index.specification.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/**
 * CUP v0.11b 20140808 (SVN rev 54) generated parser.
 */
@SuppressWarnings({ "rawtypes" })
public class ConditionalParser extends java_cup.runtime.lr_parser
{

    public final Class getSymbolContainer()
    {
        return sym.class;
    }

    /** Default constructor. */
    public ConditionalParser()
    {
        super();
    }

    /** Constructor which sets the default scanner. */
    public ConditionalParser(java_cup.runtime.Scanner s)
    {
        super(s);
    }

    /** Constructor which sets the default scanner. */
    public ConditionalParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf)
    {
        super(s, sf);
    }

    /** Production table. */
    protected static final short _production_table[][] = unpackFromStrings(
            new String[] { "\000\040\000\002\002\004\000\002\002\005\000\002\002"
                    + "\003\000\002\002\003\000\002\003\005\000\002\003\003"
                    + "\000\002\004\007\000\002\004\003\000\002\005\006\000"
                    + "\002\005\006\000\002\005\005\000\002\005\003\000\002"
                    + "\006\004\000\002\006\004\000\002\006\003\000\002\007"
                    + "\005\000\002\007\005\000\002\007\004\000\002\007\005"
                    + "\000\002\007\003\000\002\010\005\000\002\010\005\000"
                    + "\002\010\005\000\002\010\006\000\002\010\006\000\002"
                    + "\010\006\000\002\012\003\000\002\012\003\000\002\012"
                    + "\003\000\002\011\003\000\002\011\003\000\002\011\003" + "" });

    /** Access to production table. */
    public short[][] production_table()
    {
        return _production_table;
    }

    /** Parse-action table. */
    protected static final short[][] _action_table = unpackFromStrings(
            new String[] { "\000\100\000\010\003\006\005\004\024\010\001\002\000"
                    + "\004\024\073\001\002\000\006\002\ufff6\004\ufff6\001\002"
                    + "\000\006\002\ufffe\004\ufffe\001\002\000\006\002\067\004"
                    + "\066\001\002\000\014\002\ufff3\004\ufff3\007\015\025\013"
                    + "\026\014\001\002\000\006\002\ufffa\004\ufffa\001\002\000"
                    + "\006\002\uffff\004\uffff\001\002\000\010\002\ufff5\004\ufff5"
                    + "\007\064\001\002\000\010\002\ufff4\004\ufff4\007\062\001"
                    + "\002\000\016\012\016\013\022\022\025\023\017\024\024"
                    + "\026\021\001\002\000\016\012\016\013\022\022\025\023"
                    + "\017\024\024\026\021\001\002\000\010\015\030\016\027"
                    + "\021\026\001\002\000\014\002\uffee\004\uffee\010\uffee\011"
                    + "\uffee\014\uffee\001\002\000\010\015\030\016\027\021\026"
                    + "\001\002\000\016\012\016\013\022\022\025\023\017\024"
                    + "\024\026\021\001\002\000\012\002\ufff7\004\ufff7\010\047"
                    + "\011\050\001\002\000\010\022\040\023\036\026\037\001"
                    + "\002\000\010\015\030\016\027\021\026\001\002\000\010"
                    + "\027\uffe5\030\uffe5\031\uffe5\001\002\000\010\027\uffe6\030"
                    + "\uffe6\031\uffe6\001\002\000\010\027\uffe7\030\uffe7\031\uffe7"
                    + "\001\002\000\010\027\033\030\035\031\032\001\002\000"
                    + "\014\002\uffe2\004\uffe2\010\uffe2\011\uffe2\014\uffe2\001\002"
                    + "\000\014\002\uffe4\004\uffe4\010\uffe4\011\uffe4\014\uffe4\001"
                    + "\002\000\014\002\uffed\004\uffed\010\uffed\011\uffed\014\uffed"
                    + "\001\002\000\014\002\uffe3\004\uffe3\010\uffe3\011\uffe3\014"
                    + "\uffe3\001\002\000\010\015\030\016\027\021\026\001\002"
                    + "\000\010\015\030\016\027\021\026\001\002\000\010\015"
                    + "\030\016\027\021\026\001\002\000\010\027\033\030\035"
                    + "\031\032\001\002\000\014\002\uffea\004\uffea\010\uffea\011"
                    + "\uffea\014\uffea\001\002\000\010\027\033\030\035\031\032"
                    + "\001\002\000\014\002\uffe8\004\uffe8\010\uffe8\011\uffe8\014"
                    + "\uffe8\001\002\000\010\027\033\030\035\031\032\001\002"
                    + "\000\014\002\uffe9\004\uffe9\010\uffe9\011\uffe9\014\uffe9\001"
                    + "\002\000\016\012\016\013\022\022\025\023\017\024\024"
                    + "\026\021\001\002\000\016\012\016\013\022\022\025\023"
                    + "\017\024\024\026\021\001\002\000\014\002\ufff1\004\ufff1"
                    + "\010\ufff1\011\ufff1\014\ufff1\001\002\000\014\002\ufff2\004"
                    + "\ufff2\010\ufff2\011\050\014\ufff2\001\002\000\010\010\047"
                    + "\011\050\014\054\001\002\000\014\002\uffef\004\uffef\010"
                    + "\uffef\011\uffef\014\uffef\001\002\000\010\027\033\030\035"
                    + "\031\032\001\002\000\014\002\uffeb\004\uffeb\010\uffeb\011"
                    + "\uffeb\014\uffeb\001\002\000\010\027\033\030\035\031\032"
                    + "\001\002\000\014\002\uffec\004\uffec\010\uffec\011\uffec\014"
                    + "\uffec\001\002\000\014\002\ufff0\004\ufff0\010\047\011\050"
                    + "\014\ufff0\001\002\000\016\012\016\013\022\022\025\023"
                    + "\017\024\024\026\021\001\002\000\012\002\ufff8\004\ufff8"
                    + "\010\047\011\050\001\002\000\016\012\016\013\022\022"
                    + "\025\023\017\024\024\026\021\001\002\000\012\002\ufff9"
                    + "\004\ufff9\010\047\011\050\001\002\000\006\005\004\024"
                    + "\010\001\002\000\004\002\001\001\002\000\006\002\000"
                    + "\004\000\001\002\000\006\004\ufffc\006\ufffc\001\002\000"
                    + "\006\004\077\006\076\001\002\000\012\004\ufff3\006\ufff3"
                    + "\025\074\026\075\001\002\000\006\004\ufff5\006\ufff5\001"
                    + "\002\000\006\004\ufff4\006\ufff4\001\002\000\004\007\101"
                    + "\001\002\000\004\024\073\001\002\000\006\004\ufffd\006"
                    + "\ufffd\001\002\000\016\012\016\013\022\022\025\023\017"
                    + "\024\024\026\021\001\002\000\012\002\ufffb\004\ufffb\010" + "\047\011\050\001\002" });

    /** Access to parse-action table. */
    public short[][] action_table()
    {
        return _action_table;
    }

    /** <code>reduce_goto</code> table. */
    protected static final short[][] _reduce_table = unpackFromStrings(
            new String[] { "\000\100\000\012\002\006\004\011\005\010\006\004\001"
                    + "\001\000\006\003\071\006\070\001\001\000\002\001\001"
                    + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                    + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
                    + "\001\001\000\006\007\022\010\017\001\001\000\006\007"
                    + "\060\010\017\001\001\000\004\012\056\001\001\000\002"
                    + "\001\001\000\004\012\054\001\001\000\006\007\052\010"
                    + "\017\001\001\000\002\001\001\000\002\001\001\000\004"
                    + "\012\030\001\001\000\002\001\001\000\002\001\001\000"
                    + "\002\001\001\000\004\011\033\001\001\000\002\001\001"
                    + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                    + "\004\012\044\001\001\000\004\012\042\001\001\000\004"
                    + "\012\040\001\001\000\004\011\041\001\001\000\002\001"
                    + "\001\000\004\011\043\001\001\000\002\001\001\000\004"
                    + "\011\045\001\001\000\002\001\001\000\006\007\051\010"
                    + "\017\001\001\000\006\007\050\010\017\001\001\000\002"
                    + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                    + "\001\000\004\011\055\001\001\000\002\001\001\000\004"
                    + "\011\057\001\001\000\002\001\001\000\002\001\001\000"
                    + "\006\007\062\010\017\001\001\000\002\001\001\000\006"
                    + "\007\064\010\017\001\001\000\002\001\001\000\010\004"
                    + "\067\005\010\006\004\001\001\000\002\001\001\000\002"
                    + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                    + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                    + "\000\004\006\077\001\001\000\002\001\001\000\006\007"
                    + "\101\010\017\001\001\000\002\001\001" });

    /** Access to <code>reduce_goto</code> table. */
    public short[][] reduce_table()
    {
        return _reduce_table;
    }

    /** Instance of action encapsulation class. */
    protected CUP$ConditionalParser$actions action_obj;

    /** Action encapsulation object initializer. */
    protected void init_actions()
    {
        action_obj = new CUP$ConditionalParser$actions(this);
    }

    /** Invoke a user supplied parse action. */
    public java_cup.runtime.Symbol do_action(int act_num, java_cup.runtime.lr_parser parser, java.util.Stack stack,
            int top) throws java.lang.Exception
    {
        /* call code in generated class */
        return action_obj.CUP$ConditionalParser$do_action(act_num, parser, stack, top);
    }

    /** Indicates start state. */
    public int start_state()
    {
        return 0;
    }

    /** Indicates start production. */
    public int start_production()
    {
        return 0;
    }

    /** <code>EOF</code> Symbol index. */
    public int EOF_sym()
    {
        return 0;
    }

    /** <code>error</code> Symbol index. */
    public int error_sym()
    {
        return 1;
    }

    static ConditionalScanner scanner;
    static boolean parser_debug;
    static List<String> parser_errors = null;

    public static void setParserDebug(boolean b)
    {
        parser_debug = b;
    }

    public static boolean shouldParserDebug()
    {
        return (parser_debug);
    }

    public ConditionalParser(boolean debug)
    {
        super(new ComplexSymbolFactory());
        parser_debug = debug;
        this.scanner = new ConditionalScanner((ComplexSymbolFactory) getSymbolFactory());
        this.setScanner(this.scanner);
    }

    public Specification parse(String strToParse, boolean debug)
    {
        Symbol parse_tree = null;
        Specification result = null;
        parser_errors = new ArrayList<String>();
        scanner.startParse(strToParse);
        try
        {
            if (debug) parse_tree = this.debug_parse();
            else parse_tree = this.parse();
        }
        catch (Exception e)
        {
            parser_errors.add("Exception " + e.toString());
            // parser_errors.add(" Input Specification "+strToParse);
        }
        finally
        {
        }
        if (parse_tree != null)
        {
            result = (Specification) parse_tree.value;
            if (result != null)
            {
                result.setSpecLabel(strToParse);
            }
        }
        return (result);
    }

    public Specification parse(String strToParse)
    {
        return (parse(strToParse, parser_debug));
    }

    public static final List<String> getErrors()
    {
        if (scanner.getScannerErrors().size() == 0) return (parser_errors);
        List<String> allErrors = new ArrayList<String>();
        allErrors.addAll(parser_errors);
        allErrors.addAll(scanner.getScannerErrors());
        return (allErrors);
    }

    public static final void addError(String errorMsg)
    {
        parser_errors.add(errorMsg);
    }

    /** Cup generated class to encapsulate user supplied action code. */
    @SuppressWarnings({ "rawtypes", "unchecked", "unused" })
    class CUP$ConditionalParser$actions
    {
        private final ConditionalParser parser;

        /** Constructor */
        CUP$ConditionalParser$actions(ConditionalParser parser)
        {
            this.parser = parser;
        }

        /**
         * Method 0 with the actual generated action code for actions 0 to 300.
         */
        public final java_cup.runtime.Symbol CUP$ConditionalParser$do_action_part00000000(
                int CUP$ConditionalParser$act_num, java_cup.runtime.lr_parser CUP$ConditionalParser$parser,
                java.util.Stack CUP$ConditionalParser$stack, int CUP$ConditionalParser$top) throws java.lang.Exception
        {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$ConditionalParser$result;

            /* select the action based on the action number */
            switch (CUP$ConditionalParser$act_num) {
                /* . . . . . . . . . . . . . . . . . . . . */
                case 0: // $START ::= field_spec EOF
                {
                    Object RESULT = null;
                    Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 1)).xleft;
                    Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 1)).xright;
                    CompositeSpecification start_val = (CompositeSpecification) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 1)).value;
                    RESULT = start_val;
                    CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("$START", 0,
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                                    .elementAt(CUP$ConditionalParser$top - 1)),
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()), RESULT);
                }
                    /* ACCEPT */
                    CUP$ConditionalParser$parser.done_parsing();
                    return CUP$ConditionalParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
                case 1: // field_spec ::= field_spec COLON field_spec_part
                {
                    CompositeSpecification RESULT = null;
                    Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 2)).xleft;
                    Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 2)).xright;
                    CompositeSpecification s = (CompositeSpecification) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 2)).value;
                    Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xleft;
                    Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xright;
                    CompositeSpecification s1 = (CompositeSpecification) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                            .peek()).value;
                    s.addSpec(s1);
                    RESULT = s;
                    CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec", 0,
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                                    .elementAt(CUP$ConditionalParser$top - 2)),
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()), RESULT);
                }
                    return CUP$ConditionalParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
                case 2: // field_spec ::= field_spec_part
                {
                    CompositeSpecification RESULT = null;
                    Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xleft;
                    Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xright;
                    CompositeSpecification s = (CompositeSpecification) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                            .peek()).value;
                    RESULT = new CompositeSpecification(s);
                    CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec", 0,
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()),
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()), RESULT);
                }
                    return CUP$ConditionalParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
                case 3: // field_spec ::= error
                {
                    CompositeSpecification RESULT = null;
                    RESULT = null;
                    CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec", 0,
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()),
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()), RESULT);
                }
                    return CUP$ConditionalParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
                case 4: // field_spec_simple ::= field_spec_simple COLON
                        // field_spec_part_simple
                {
                    CompositeSpecification RESULT = null;
                    Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 2)).xleft;
                    Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 2)).xright;
                    CompositeSpecification s = (CompositeSpecification) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 2)).value;
                    Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xleft;
                    Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xright;
                    SingleSpecification s1 = (SingleSpecification) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                            .peek()).value;
                    s.addSpec(s1);
                    RESULT = s;
                    CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_simple", 1,
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                                    .elementAt(CUP$ConditionalParser$top - 2)),
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()), RESULT);
                }
                    return CUP$ConditionalParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
                case 5: // field_spec_simple ::= field_spec_part_simple
                {
                    CompositeSpecification RESULT = null;
                    Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xleft;
                    Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xright;
                    SingleSpecification s = (SingleSpecification) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                            .peek()).value;
                    RESULT = new CompositeSpecification(s);
                    CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_simple", 1,
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()),
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()), RESULT);
                }
                    return CUP$ConditionalParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
                case 6: // field_spec_part ::= LBRACE field_spec_simple RBRACE
                        // QUESTION expr
                {
                    CompositeSpecification RESULT = null;
                    Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 3)).xleft;
                    Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 3)).xright;
                    CompositeSpecification s = (CompositeSpecification) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 3)).value;
                    Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xleft;
                    Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xright;
                    Condition e = (Condition) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
                    s.addConditional(e);
                    RESULT = s;
                    CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part", 2,
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                                    .elementAt(CUP$ConditionalParser$top - 4)),
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()), RESULT);
                }
                    return CUP$ConditionalParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
                case 7: // field_spec_part ::= field_spec_part_complex
                {
                    CompositeSpecification RESULT = null;
                    Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xleft;
                    Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xright;
                    SingleSpecification s = (SingleSpecification) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                            .peek()).value;
                    RESULT = new CompositeSpecification(s);
                    CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part", 2,
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()),
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()), RESULT);
                }
                    return CUP$ConditionalParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
                case 8: // field_spec_part_complex ::= FIELDSPEC SUBFIELDSPEC
                        // QUESTION expr
                {
                    SingleSpecification RESULT = null;
                    Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 3)).xleft;
                    Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 3)).xright;
                    String f = (String) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 3)).value;
                    Location sfxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 2)).xleft;
                    Location sfxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 2)).xright;
                    String sf = (String) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 2)).value;
                    Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xleft;
                    Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xright;
                    Condition e = (Condition) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
                    RESULT = AbstractSpecificationFactory.makeSingleSpecification(f, sf, e);
                    CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part_complex", 3,
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                                    .elementAt(CUP$ConditionalParser$top - 3)),
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()), RESULT);
                }
                    return CUP$ConditionalParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
                case 9: // field_spec_part_complex ::= FIELDSPEC POSITION
                        // QUESTION expr
                {
                    SingleSpecification RESULT = null;
                    Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 3)).xleft;
                    Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 3)).xright;
                    String f = (String) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 3)).value;
                    Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 2)).xleft;
                    Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 2)).xright;
                    String p = (String) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 2)).value;
                    Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xleft;
                    Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xright;
                    Condition e = (Condition) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
                    RESULT = AbstractSpecificationFactory.makeSingleSpecification(f, p, e);
                    CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part_complex", 3,
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                                    .elementAt(CUP$ConditionalParser$top - 3)),
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()), RESULT);
                }
                    return CUP$ConditionalParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
                case 10: // field_spec_part_complex ::= FIELDSPEC QUESTION expr
                {
                    SingleSpecification RESULT = null;
                    Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 2)).xleft;
                    Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 2)).xright;
                    String f = (String) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 2)).value;
                    Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xleft;
                    Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xright;
                    Condition e = (Condition) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
                    RESULT = AbstractSpecificationFactory.makeSingleSpecification(f, null, e);
                    CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part_complex", 3,
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                                    .elementAt(CUP$ConditionalParser$top - 2)),
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()), RESULT);
                }
                    return CUP$ConditionalParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
                case 11: // field_spec_part_complex ::= field_spec_part_simple
                {
                    SingleSpecification RESULT = null;
                    Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xleft;
                    Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xright;
                    SingleSpecification s = (SingleSpecification) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                            .peek()).value;
                    RESULT = s;
                    CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part_complex", 3,
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()),
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()), RESULT);
                }
                    return CUP$ConditionalParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
                case 12: // field_spec_part_simple ::= FIELDSPEC SUBFIELDSPEC
                {
                    SingleSpecification RESULT = null;
                    Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 1)).xleft;
                    Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 1)).xright;
                    String f = (String) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 1)).value;
                    Location sfxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xleft;
                    Location sfxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xright;
                    String sf = (String) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
                    RESULT = AbstractSpecificationFactory.makeSingleSpecification(f, sf);
                    CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part_simple", 4,
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                                    .elementAt(CUP$ConditionalParser$top - 1)),
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()), RESULT);
                }
                    return CUP$ConditionalParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
                case 13: // field_spec_part_simple ::= FIELDSPEC POSITION
                {
                    SingleSpecification RESULT = null;
                    Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 1)).xleft;
                    Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 1)).xright;
                    String f = (String) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 1)).value;
                    Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xleft;
                    Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xright;
                    String p = (String) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
                    RESULT = AbstractSpecificationFactory.makeSingleSpecification(f, p);
                    CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part_simple", 4,
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                                    .elementAt(CUP$ConditionalParser$top - 1)),
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()), RESULT);
                }
                    return CUP$ConditionalParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
                case 14: // field_spec_part_simple ::= FIELDSPEC
                {
                    SingleSpecification RESULT = null;
                    Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xleft;
                    Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xright;
                    String f = (String) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
                    RESULT = AbstractSpecificationFactory.makeSingleSpecification(f, null);
                    CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part_simple", 4,
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()),
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()), RESULT);
                }
                    return CUP$ConditionalParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
                case 15: // expr ::= expr AND expr
                {
                    Condition RESULT = null;
                    Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 2)).xleft;
                    Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 2)).xright;
                    Condition e1 = (Condition) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 2)).value;
                    Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xleft;
                    Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xright;
                    Condition e2 = (Condition) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
                    RESULT = new ConditionComposite(e1, e2, sym.AND);
                    CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("expr", 5,
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                                    .elementAt(CUP$ConditionalParser$top - 2)),
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()), RESULT);
                }
                    return CUP$ConditionalParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
                case 16: // expr ::= expr OR expr
                {
                    Condition RESULT = null;
                    Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 2)).xleft;
                    Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 2)).xright;
                    Condition e1 = (Condition) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 2)).value;
                    Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xleft;
                    Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xright;
                    Condition e2 = (Condition) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
                    RESULT = new ConditionComposite(e1, e2, sym.OR);
                    CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("expr", 5,
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                                    .elementAt(CUP$ConditionalParser$top - 2)),
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()), RESULT);
                }
                    return CUP$ConditionalParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
                case 17: // expr ::= NOT expr
                {
                    Condition RESULT = null;
                    Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xleft;
                    Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xright;
                    Condition e = (Condition) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
                    RESULT = new ConditionComposite(e, null, sym.NOT);
                    CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("expr", 5,
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                                    .elementAt(CUP$ConditionalParser$top - 1)),
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()), RESULT);
                }
                    return CUP$ConditionalParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
                case 18: // expr ::= LPAREN expr RPAREN
                {
                    Condition RESULT = null;
                    Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 1)).xleft;
                    Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 1)).xright;
                    Condition e = (Condition) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 1)).value;
                    RESULT = e;
                    CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("expr", 5,
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                                    .elementAt(CUP$ConditionalParser$top - 2)),
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()), RESULT);
                }
                    return CUP$ConditionalParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
                case 19: // expr ::= expr_part
                {
                    Condition RESULT = null;
                    Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xleft;
                    Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xright;
                    Condition e = (Condition) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
                    RESULT = e;
                    CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("expr", 5,
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()),
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()), RESULT);
                }
                    return CUP$ConditionalParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
                case 20: // expr_part ::= SUBFIELD op value
                {
                    Condition RESULT = null;
                    Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 2)).xleft;
                    Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 2)).xright;
                    String s1 = (String) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 2)).value;
                    Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 1)).xleft;
                    Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 1)).xright;
                    Integer i = (Integer) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 1)).value;
                    Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xleft;
                    Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xright;
                    String s2 = (String) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
                    RESULT = new ConditionSubfield(s1, s2, ((int) i));
                    CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("expr_part", 6,
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                                    .elementAt(CUP$ConditionalParser$top - 2)),
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()), RESULT);
                }
                    return CUP$ConditionalParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
                case 21: // expr_part ::= IND op value
                {
                    Condition RESULT = null;
                    Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 2)).xleft;
                    Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 2)).xright;
                    String s1 = (String) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 2)).value;
                    Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 1)).xleft;
                    Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 1)).xright;
                    Integer i = (Integer) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 1)).value;
                    Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xleft;
                    Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xright;
                    String s2 = (String) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
                    RESULT = new ConditionIndicator(s1, s2, ((int) i));
                    CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("expr_part", 6,
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                                    .elementAt(CUP$ConditionalParser$top - 2)),
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()), RESULT);
                }
                    return CUP$ConditionalParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
                case 22: // expr_part ::= POSITION op value
                {
                    Condition RESULT = null;
                    Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 2)).xleft;
                    Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 2)).xright;
                    String s1 = (String) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 2)).value;
                    Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 1)).xleft;
                    Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 1)).xright;
                    Integer i = (Integer) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 1)).value;
                    Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xleft;
                    Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xright;
                    String s2 = (String) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
                    RESULT = new ConditionPosition(s1, s2, ((int) i));
                    CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("expr_part", 6,
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                                    .elementAt(CUP$ConditionalParser$top - 2)),
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()), RESULT);
                }
                    return CUP$ConditionalParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
                case 23: // expr_part ::= FIELDSPEC SUBFIELD op value
                {
                    Condition RESULT = null;
                    Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 3)).xleft;
                    Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 3)).xright;
                    String s1 = (String) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 3)).value;
                    Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 2)).xleft;
                    Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 2)).xright;
                    String s2 = (String) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 2)).value;
                    Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 1)).xleft;
                    Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 1)).xright;
                    Integer i = (Integer) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 1)).value;
                    Location s3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xleft;
                    Location s3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xright;
                    String s3 = (String) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
                    RESULT = new ConditionSubfield(s1, s2, s3, ((int) i));
                    CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("expr_part", 6,
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                                    .elementAt(CUP$ConditionalParser$top - 3)),
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()), RESULT);
                }
                    return CUP$ConditionalParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
                case 24: // expr_part ::= FIELDSPEC IND op value
                {
                    Condition RESULT = null;
                    Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 3)).xleft;
                    Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 3)).xright;
                    String s1 = (String) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 3)).value;
                    Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 2)).xleft;
                    Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 2)).xright;
                    String s2 = (String) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 2)).value;
                    Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 1)).xleft;
                    Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 1)).xright;
                    Integer i = (Integer) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 1)).value;
                    Location s3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xleft;
                    Location s3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xright;
                    String s3 = (String) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
                    RESULT = new ConditionIndicator(s1, s2, s3, ((int) i));
                    CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("expr_part", 6,
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                                    .elementAt(CUP$ConditionalParser$top - 3)),
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()), RESULT);
                }
                    return CUP$ConditionalParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
                case 25: // expr_part ::= FIELDSPEC POSITION op value
                {
                    Condition RESULT = null;
                    Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 3)).xleft;
                    Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 3)).xright;
                    String s1 = (String) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 3)).value;
                    Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 2)).xleft;
                    Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 2)).xright;
                    String s2 = (String) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 2)).value;
                    Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 1)).xleft;
                    Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 1)).xright;
                    Integer i = (Integer) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                            .elementAt(CUP$ConditionalParser$top - 1)).value;
                    Location s3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xleft;
                    Location s3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xright;
                    String s3 = (String) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
                    RESULT = new ConditionPosition(s1, s2, s3, ((int) i));
                    CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("expr_part", 6,
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack
                                    .elementAt(CUP$ConditionalParser$top - 3)),
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()), RESULT);
                }
                    return CUP$ConditionalParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
                case 26: // op ::= EQU
                {
                    Integer RESULT = null;
                    RESULT = new Integer(sym.EQU);
                    CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("op", 8,
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()),
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()), RESULT);
                }
                    return CUP$ConditionalParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
                case 27: // op ::= NEQ
                {
                    Integer RESULT = null;
                    RESULT = new Integer(sym.NEQ);
                    CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("op", 8,
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()),
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()), RESULT);
                }
                    return CUP$ConditionalParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
                case 28: // op ::= MATCH
                {
                    Integer RESULT = null;
                    RESULT = new Integer(sym.MATCH);
                    CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("op", 8,
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()),
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()), RESULT);
                }
                    return CUP$ConditionalParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
                case 29: // value ::= QUOTEDSTR
                {
                    String RESULT = null;
                    Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xleft;
                    Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xright;
                    String s = (String) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
                    RESULT = s;
                    CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("value", 7,
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()),
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()), RESULT);
                }
                    return CUP$ConditionalParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
                case 30: // value ::= CHAR
                {
                    String RESULT = null;
                    Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xleft;
                    Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xright;
                    String s = (String) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
                    RESULT = s;
                    CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("value", 7,
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()),
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()), RESULT);
                }
                    return CUP$ConditionalParser$result;

                /* . . . . . . . . . . . . . . . . . . . . */
                case 31: // value ::= NUMBER
                {
                    String RESULT = null;
                    Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xleft;
                    Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$ConditionalParser$stack
                            .peek()).xright;
                    String s = (String) ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()).value;
                    RESULT = s;
                    CUP$ConditionalParser$result = parser.getSymbolFactory().newSymbol("value", 7,
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()),
                            ((java_cup.runtime.Symbol) CUP$ConditionalParser$stack.peek()), RESULT);
                }
                    return CUP$ConditionalParser$result;

                /* . . . . . . */
                default:
                    throw new Exception(
                            "Invalid action number " + CUP$ConditionalParser$act_num + "found in internal parse table");

            }
        } /* end of method */

        /** Method splitting the generated action code into several parts. */
        public final java_cup.runtime.Symbol CUP$ConditionalParser$do_action(int CUP$ConditionalParser$act_num,
                java_cup.runtime.lr_parser CUP$ConditionalParser$parser, java.util.Stack CUP$ConditionalParser$stack,
                int CUP$ConditionalParser$top) throws java.lang.Exception
        {
            return CUP$ConditionalParser$do_action_part00000000(CUP$ConditionalParser$act_num,
                    CUP$ConditionalParser$parser, CUP$ConditionalParser$stack, CUP$ConditionalParser$top);
        }
    }

}
