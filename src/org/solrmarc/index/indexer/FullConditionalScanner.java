/* The following code was generated by JFlex 1.6.0 */

package org.solrmarc.index.indexer;

import java.util.List;
import java.util.ArrayList;
import org.solrmarc.index.utils.StringReader;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.Location;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>C:/Users/rh9ec/Development/workspace/SolrMarc-3.0-Github/src/org/solrmarc/index/indexer/FullScanner.lex</tt>
 */
public class FullConditionalScanner extends org.solrmarc.index.indexer.FullSym implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CONDITIONAL = 4;
  public static final int SUBFIELDSPEC = 6;
  public static final int CUSTOMSPEC = 8;
  public static final int CUSTOMMETHOD = 10;
  public static final int CUSTOMPARAM = 12;
  public static final int MAPSPEC = 14;
  public static final int CONSTANT = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8, 8
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\4\1\102\1\103\1\3\22\0\1\5\1\71\1\55"+
    "\1\0\1\66\1\0\1\77\1\100\1\57\1\60\2\0\1\52\1\63"+
    "\2\7\1\1\1\67\1\22\7\2\1\50\1\0\1\74\1\70\1\76"+
    "\1\51\1\0\1\32\2\47\1\33\1\47\1\25\2\47\1\41\1\47"+
    "\1\46\1\44\1\47\1\45\1\34\1\36\1\47\1\27\4\47\1\75"+
    "\3\47\1\61\1\101\1\64\1\62\1\42\1\0\1\14\1\37\1\30"+
    "\1\31\1\24\1\35\1\6\1\73\1\40\1\16\1\6\1\12\1\11"+
    "\1\21\1\20\1\53\1\6\1\13\1\17\1\23\1\26\1\54\1\15"+
    "\1\10\2\6\1\43\1\56\1\65\1\72\6\0\1\102\u1fa2\0\1\102"+
    "\1\102\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\2\1\2\2\13\1\1\3\1\1\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\2\13\5\1\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\1\1\22\1\1"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\1\1\31"+
    "\1\32\1\33\1\1\1\34\1\1\1\35\1\36\1\37"+
    "\1\13\1\40\1\41\1\42\1\1\16\0\1\43\1\44"+
    "\1\45\1\46\6\0\1\17\1\0\1\47\1\23\1\50"+
    "\1\30\4\0\1\51\1\0\1\51\1\52\1\53\11\0"+
    "\1\52\1\54\6\0\1\55\1\56\1\0\1\31\1\51"+
    "\1\57\1\53\3\0\1\60\7\0\1\61\1\62\1\0"+
    "\1\63\1\51\12\0\1\51\1\64\1\0\1\65\7\0"+
    "\1\51\15\0\1\66\1\51\5\0\1\51\3\0\1\60"+
    "\1\67\3\0\1\53\12\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[211];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0264\0\u0330\0\u0374\0\u03b8"+
    "\0\u03fc\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8"+
    "\0\u0264\0\u061c\0\u0264\0\u0264\0\u0264\0\u0264\0\u0660\0\u0264"+
    "\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8\0\u083c\0\u0880"+
    "\0\u0264\0\u0264\0\u0264\0\u08c4\0\u0264\0\u0264\0\u0908\0\u0264"+
    "\0\u094c\0\u0990\0\u09d4\0\u0264\0\u0264\0\u0264\0\u0a18\0\u0a5c"+
    "\0\u0aa0\0\u0264\0\u0264\0\u0ae4\0\u0264\0\u0b28\0\u0264\0\u0264"+
    "\0\u0264\0\u0b28\0\u0264\0\u0264\0\u0264\0\u0b6c\0\u0bb0\0\u0bf4"+
    "\0\u0c38\0\u0c7c\0\u0cc0\0\u0d04\0\u0d48\0\u0d8c\0\u0dd0\0\u0e14"+
    "\0\u0e58\0\u0e9c\0\u0ee0\0\u0f24\0\u0264\0\u0264\0\u0264\0\u0264"+
    "\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u10bc\0\u0264\0\u1100"+
    "\0\u0264\0\u0264\0\u0264\0\u0264\0\u1144\0\u1188\0\u11cc\0\u1210"+
    "\0\u0b28\0\u0b28\0\u1254\0\u0264\0\u0264\0\u1298\0\u12dc\0\u1320"+
    "\0\u1364\0\u13a8\0\u13ec\0\u1430\0\u1474\0\u14b8\0\u14fc\0\u0264"+
    "\0\u1540\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694\0\u0264\0\u0264"+
    "\0\u16d8\0\u0264\0\u171c\0\u0264\0\u1760\0\u17a4\0\u17e8\0\u182c"+
    "\0\u1870\0\u1870\0\u18b4\0\u02a8\0\u18f8\0\u193c\0\u1980\0\u19c4"+
    "\0\u0264\0\u0264\0\u1a08\0\u0264\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18"+
    "\0\u1b5c\0\u1ba0\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38"+
    "\0\u0264\0\u1d7c\0\u0264\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0"+
    "\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0\0\u2024\0\u2068\0\u20ac\0\u20f0"+
    "\0\u2134\0\u2178\0\u21bc\0\u2200\0\u2244\0\u2288\0\u22cc\0\u2310"+
    "\0\u0264\0\u2354\0\u2398\0\u23dc\0\u2420\0\u2464\0\u24a8\0\u24ec"+
    "\0\u2530\0\u2574\0\u25b8\0\u0264\0\u0b28\0\u25fc\0\u2640\0\u2684"+
    "\0\u26c8\0\u270c\0\u2750\0\u2794\0\u27d8\0\u281c\0\u2860\0\u28a4"+
    "\0\u28e8\0\u292c\0\u2970";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[211];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\2\13\1\14\2\15\2\12\1\16\2\12\1\17"+
    "\2\12\1\20\1\21\2\12\1\13\1\22\1\12\1\23"+
    "\1\12\1\24\1\25\1\26\1\24\1\27\1\24\1\12"+
    "\1\24\1\12\1\30\1\24\1\12\1\31\1\32\3\24"+
    "\1\33\1\34\1\35\2\12\1\36\11\12\1\13\5\12"+
    "\1\24\5\12\1\15\3\37\2\12\50\37\1\40\23\37"+
    "\1\41\2\37\1\12\1\42\1\43\1\14\2\15\3\12"+
    "\1\44\5\12\1\45\2\12\1\43\1\12\1\46\3\12"+
    "\1\47\7\12\1\50\7\12\1\51\1\12\1\52\2\12"+
    "\1\53\1\54\1\55\1\56\1\57\3\12\1\60\1\61"+
    "\1\43\1\62\1\63\1\64\1\12\1\65\1\12\1\66"+
    "\1\67\1\70\2\12\1\15\3\12\1\14\2\15\1\71"+
    "\1\12\12\71\1\12\2\71\1\12\1\71\1\12\2\71"+
    "\3\12\1\71\1\12\2\71\7\12\1\72\1\73\1\52"+
    "\2\71\4\12\1\74\3\12\1\75\5\12\1\71\7\12"+
    "\1\15\1\12\2\76\1\14\2\15\1\76\1\12\32\76"+
    "\2\12\4\76\2\12\1\77\2\76\2\12\1\55\1\56"+
    "\6\12\1\76\3\12\1\76\1\12\1\76\5\12\1\15"+
    "\1\12\2\76\1\14\2\15\1\76\1\12\32\76\2\12"+
    "\4\76\2\12\1\100\2\76\2\12\1\101\7\12\1\76"+
    "\3\12\1\76\1\12\1\76\5\12\1\15\1\12\2\102"+
    "\1\14\2\15\1\76\1\12\12\76\1\102\17\76\2\12"+
    "\4\76\2\12\1\103\2\76\1\104\1\12\1\55\1\105"+
    "\6\12\1\102\3\12\1\76\1\12\1\76\5\12\1\15"+
    "\1\12\2\76\1\14\2\15\1\76\1\12\20\76\1\106"+
    "\11\76\2\12\4\76\2\12\1\103\2\76\2\12\1\101"+
    "\1\56\6\12\1\76\3\12\1\76\1\12\1\76\5\12"+
    "\1\15\3\12\1\14\2\15\44\12\1\52\2\12\1\36"+
    "\1\54\24\12\1\15\105\0\2\107\17\0\1\107\44\0"+
    "\1\107\20\0\1\15\110\0\1\110\106\0\1\111\103\0"+
    "\1\112\2\0\1\113\114\0\1\114\77\0\1\115\104\0"+
    "\1\116\1\117\1\116\2\0\3\116\1\0\1\116\2\0"+
    "\1\116\2\0\4\116\25\0\1\116\33\0\1\116\1\0"+
    "\1\116\2\0\3\116\1\0\1\116\2\0\1\116\2\0"+
    "\4\116\25\0\1\116\34\0\1\120\71\0\1\121\103\0"+
    "\1\122\10\0\1\116\1\0\1\116\2\0\3\116\1\0"+
    "\1\116\2\0\1\116\2\0\4\116\25\0\1\116\27\0"+
    "\1\123\107\0\1\116\1\0\1\116\2\0\3\116\1\0"+
    "\1\116\2\0\1\116\2\0\1\116\1\124\2\116\25\0"+
    "\1\116\6\0\3\37\2\0\50\37\1\0\23\37\1\0"+
    "\2\37\13\0\1\125\5\0\1\126\1\0\1\127\31\0"+
    "\1\130\27\0\1\131\103\0\2\43\17\0\1\43\44\0"+
    "\1\43\30\0\1\132\112\0\1\133\101\0\1\134\102\0"+
    "\1\135\104\0\1\136\140\0\1\137\26\0\2\140\17\0"+
    "\1\140\44\0\1\140\15\0\2\141\3\0\1\141\1\0"+
    "\32\141\2\0\4\141\3\0\2\141\12\0\1\141\3\0"+
    "\1\141\1\0\1\141\76\0\1\142\103\0\1\143\112\0"+
    "\1\144\4\0\101\145\1\146\2\145\1\0\2\71\3\0"+
    "\1\71\1\0\15\71\1\0\1\71\1\0\2\71\3\0"+
    "\1\71\1\0\2\71\12\0\2\71\12\0\1\71\3\0"+
    "\1\71\11\0\2\140\3\0\1\147\1\0\12\147\1\140"+
    "\2\147\1\0\1\147\1\0\2\147\3\0\1\147\1\0"+
    "\2\147\12\0\2\147\5\0\1\150\4\0\1\140\3\0"+
    "\1\147\11\0\2\151\3\0\1\151\1\152\32\151\1\152"+
    "\1\0\4\151\3\0\2\151\12\0\1\151\3\0\1\151"+
    "\1\0\1\151\3\0\1\152\3\0\2\151\3\0\1\151"+
    "\1\152\16\151\1\153\13\151\1\152\1\0\4\151\3\0"+
    "\2\151\12\0\1\151\3\0\1\151\1\0\1\151\3\0"+
    "\1\152\3\0\2\154\17\0\1\154\44\0\1\154\26\0"+
    "\1\155\106\0\1\155\142\0\1\156\47\0\1\157\76\0"+
    "\1\160\100\0\1\161\120\0\1\154\1\0\1\154\2\0"+
    "\3\154\1\0\1\154\2\0\1\154\2\0\4\154\25\0"+
    "\1\154\20\0\1\162\110\0\1\163\107\0\1\164\103\0"+
    "\1\165\111\0\1\166\77\0\1\154\1\0\1\154\2\0"+
    "\3\154\1\0\1\154\2\0\1\154\2\0\2\154\1\167"+
    "\1\154\25\0\1\154\7\0\2\170\17\0\1\170\44\0"+
    "\1\170\37\0\1\171\74\0\1\172\120\0\1\173\73\0"+
    "\1\174\113\0\1\175\53\0\2\140\17\0\1\140\40\0"+
    "\1\176\1\177\2\0\1\140\114\0\1\200\3\0\3\201"+
    "\2\0\75\201\3\0\2\147\3\0\1\147\1\0\15\147"+
    "\1\0\1\147\1\0\2\147\3\0\1\147\1\0\2\147"+
    "\12\0\2\147\6\0\1\147\1\202\2\0\1\147\3\0"+
    "\1\147\16\0\1\147\1\0\12\147\1\0\2\147\1\0"+
    "\1\147\1\0\2\147\3\0\1\147\1\0\2\147\12\0"+
    "\2\147\16\0\1\147\11\0\2\151\3\0\1\151\1\152"+
    "\7\151\1\203\22\151\1\152\1\0\4\151\3\0\2\151"+
    "\12\0\1\151\3\0\1\151\1\0\1\151\3\0\1\152"+
    "\16\0\1\204\110\0\1\205\122\0\1\206\66\0\1\155"+
    "\72\0\1\207\114\0\1\210\104\0\1\211\103\0\1\212"+
    "\103\0\1\213\60\0\2\214\17\0\1\214\44\0\1\214"+
    "\44\0\1\215\66\0\1\216\107\0\1\217\107\0\1\220"+
    "\61\0\2\221\17\0\1\222\44\0\1\222\15\0\2\223"+
    "\17\0\1\223\44\0\1\223\114\0\1\224\4\0\2\151"+
    "\3\0\1\151\1\152\13\151\1\225\16\151\1\152\1\0"+
    "\4\151\3\0\2\151\12\0\1\151\3\0\1\151\1\0"+
    "\1\151\3\0\1\152\24\0\1\155\134\0\1\226\57\0"+
    "\1\227\74\0\1\230\112\0\1\231\4\0\1\232\57\0"+
    "\1\233\166\0\1\234\33\0\1\235\155\0\1\236\22\0"+
    "\1\237\70\0\2\223\17\0\1\223\41\0\1\177\2\0"+
    "\1\223\15\0\2\151\3\0\1\151\1\152\10\151\1\240"+
    "\21\151\1\152\1\0\4\151\3\0\2\151\12\0\1\151"+
    "\3\0\1\151\1\0\1\151\3\0\1\152\25\0\1\241"+
    "\104\0\1\242\70\0\1\243\116\0\1\244\114\0\1\245"+
    "\110\0\1\246\65\0\1\247\76\0\1\250\124\0\1\251"+
    "\103\0\1\252\44\0\2\151\3\0\1\151\1\152\1\151"+
    "\1\253\30\151\1\152\1\0\4\151\3\0\2\151\12\0"+
    "\1\151\3\0\1\151\1\0\1\151\3\0\1\152\32\0"+
    "\1\254\103\0\1\255\111\0\1\256\76\0\1\257\71\0"+
    "\1\64\161\0\1\260\31\0\1\261\101\0\1\262\63\0"+
    "\2\151\3\0\1\151\1\152\32\151\1\263\1\0\4\151"+
    "\3\0\2\151\12\0\1\151\3\0\1\151\1\0\1\151"+
    "\3\0\1\152\22\0\1\264\103\0\1\265\111\0\1\266"+
    "\71\0\1\267\127\0\1\270\136\0\1\66\27\0\1\271"+
    "\65\0\2\151\3\0\1\151\1\152\1\151\1\272\30\151"+
    "\1\152\1\0\4\151\3\0\2\151\12\0\1\151\3\0"+
    "\1\151\1\0\1\151\3\0\1\152\15\0\1\273\103\0"+
    "\1\274\127\0\1\275\67\0\1\276\103\0\1\277\61\0"+
    "\2\151\3\0\1\151\1\152\4\151\1\300\25\151\1\152"+
    "\1\0\4\151\3\0\2\151\12\0\1\151\3\0\1\151"+
    "\1\0\1\151\3\0\1\152\33\0\1\301\103\0\1\302"+
    "\64\0\1\303\115\0\1\304\152\0\1\65\11\0\2\151"+
    "\3\0\1\151\1\152\32\151\1\152\1\0\4\151\3\0"+
    "\1\305\1\151\12\0\1\151\3\0\1\151\1\0\1\151"+
    "\3\0\1\152\34\0\1\306\112\0\1\307\102\0\1\310"+
    "\62\0\1\311\105\0\1\312\112\0\1\313\54\0\2\311"+
    "\3\0\1\311\1\0\32\311\2\0\4\311\3\0\2\311"+
    "\12\0\1\311\3\0\1\311\1\0\1\311\37\0\1\314"+
    "\66\0\1\315\113\0\1\316\102\0\1\317\70\0\1\320"+
    "\133\0\1\321\67\0\1\322\77\0\1\323\114\0\1\304"+
    "\73\0\1\304\62\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10676];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\11\2\1\1\11\13\1\1\11\1\1\4\11"+
    "\1\1\1\11\10\1\3\11\1\1\2\11\1\1\1\11"+
    "\3\1\3\11\3\1\2\11\1\1\1\11\1\1\3\11"+
    "\1\1\3\11\1\1\16\0\4\11\6\0\1\11\1\0"+
    "\4\11\4\0\1\1\1\0\1\1\2\11\11\0\1\1"+
    "\1\11\6\0\2\11\1\0\1\11\1\1\1\11\1\1"+
    "\3\0\1\1\7\0\2\11\1\0\1\11\1\1\12\0"+
    "\1\1\1\11\1\0\1\11\7\0\1\1\15\0\1\11"+
    "\1\1\5\0\1\1\3\0\1\11\1\1\3\0\1\1"+
    "\12\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[211];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    int save_zzLexicalState;
    
    List<String> scanner_errors = null;
    StringBuilder string = new StringBuilder();
    public FullConditionalScanner(ComplexSymbolFactory sf)
    {
		this(new StringReader(""));
		this.sf = sf;
		scanner_errors = new ArrayList<String>();
    }
    
    ComplexSymbolFactory sf;
    
    public void startParse(String strToParse)
    {
        yyreset(new StringReader(strToParse));
        scanner_errors = new ArrayList<String>();
    }
    
    private void error(String message) 
    {
        scanner_errors.add(message);
    }
    
    public List<String> getScannerErrors()
    {
    	return(scanner_errors);
    }
    
    private Symbol symbol(String name, int sym) 
    {
        return sf.newSymbol(name, sym, new Location(yyline+1, yycolumn+1, yychar), new Location(yyline+1, yycolumn+yylength(), yychar+yylength()));
    }

    private Symbol symbol(String name, int sym, Object val)
    {
        Location left = new Location(yyline+1,yycolumn+1,yychar);
        Location right= new Location(yyline+1,yycolumn+yylength(), yychar+yylength());
        return sf.newSymbol(name, sym, left, right,val);
    }
      


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FullConditionalScanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 216) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { /* throw new Error("Illegal character <"+ yytext()+">");*/
		    		String scannerStateStr = "initial";
		    		switch (yystate() ) {
		    			case YYINITIAL:    scannerStateStr = "startspec";    break;
		    			case STRING:       scannerStateStr = "string";       break;
		    			case CONDITIONAL:  scannerStateStr = "conditional";  break; 
		    			case SUBFIELDSPEC: scannerStateStr = "subfield";     break;
		    			case CUSTOMSPEC:   scannerStateStr = "customspec";   break;
		    			case CUSTOMMETHOD: scannerStateStr = "custommethod"; break;
		    			case CUSTOMPARAM:  scannerStateStr = "customparam";  break;
		    			case MAPSPEC:      scannerStateStr = "mapspec";      break;
		    			default:           scannerStateStr = "unknown";      break; 
		    		}
		    		error("Error: Illegal character <"+ yytext()+">  found in scanner state "+ scannerStateStr);
          }
        case 56: break;
        case 2: 
          { /* ignore */
          }
        case 57: break;
        case 3: 
          { return symbol("{",FullSym.LBRACE);
          }
        case 58: break;
        case 4: 
          { yybegin(YYINITIAL);    return symbol(":",FullSym.COLON);
          }
        case 59: break;
        case 5: 
          { yybegin(CONDITIONAL);  return symbol("?",FullSym.QUESTION);
          }
        case 60: break;
        case 6: 
          { yybegin(MAPSPEC);      return symbol(",", FullSym.COMMA);
          }
        case 61: break;
        case 7: 
          { save_zzLexicalState = CONSTANT; string.setLength(0); yybegin(STRING);
          }
        case 62: break;
        case 8: 
          { string.append( yytext() );
          }
        case 63: break;
        case 9: 
          { yybegin(save_zzLexicalState); 
                                   return symbol("QUOTEDSTR",FullSym.QUOTEDSTR,string.toString());
          }
        case 64: break;
        case 10: 
          { string.append('\\');
          }
        case 65: break;
        case 11: 
          { return symbol("NUMBER",FullSym.NUMBER, yytext());
          }
        case 66: break;
        case 12: 
          { yybegin(YYINITIAL);  return symbol(":", FullSym.COLON);
          }
        case 67: break;
        case 13: 
          { yybegin(MAPSPEC);  return symbol(",", FullSym.COMMA);
          }
        case 68: break;
        case 14: 
          { string.setLength(0); save_zzLexicalState = CONDITIONAL; yybegin(STRING);
          }
        case 69: break;
        case 15: 
          { return symbol("OR",FullSym.OR);
          }
        case 70: break;
        case 16: 
          { return symbol("(",FullSym.LPAREN);
          }
        case 71: break;
        case 17: 
          { return symbol(")",FullSym.RPAREN);
          }
        case 72: break;
        case 18: 
          { yybegin(YYINITIAL);  return symbol("}", FullSym.RBRACE);
          }
        case 73: break;
        case 19: 
          { return symbol("EQU",FullSym.EQU );
          }
        case 74: break;
        case 20: 
          { return symbol("NOT",FullSym.NOT);
          }
        case 75: break;
        case 21: 
          { return symbol("MATCH",FullSym.MATCH);
          }
        case 76: break;
        case 22: 
          { return symbol("LE",FullSym.LT);
          }
        case 77: break;
        case 23: 
          { return symbol("GT",FullSym.GT);
          }
        case 78: break;
        case 24: 
          { return symbol("AND",FullSym.AND);
          }
        case 79: break;
        case 25: 
          { return symbol("SUBFIELDSPEC",FullSym.SUBFIELDSPEC, yytext());
          }
        case 80: break;
        case 26: 
          { yybegin(YYINITIAL);   return symbol(":",FullSym.COLON);
          }
        case 81: break;
        case 27: 
          { yybegin(CONDITIONAL); return symbol("?",FullSym.QUESTION);
          }
        case 82: break;
        case 28: 
          { yybegin(YYINITIAL);   return symbol("}",FullSym.RBRACE);
          }
        case 83: break;
        case 29: 
          { yybegin(CUSTOMMETHOD); return symbol(",", FullSym.COMMA);
          }
        case 84: break;
        case 30: 
          { yybegin(MAPSPEC); return symbol(",", FullSym.COMMA);
          }
        case 85: break;
        case 31: 
          { yybegin(CUSTOMPARAM); return symbol("(",FullSym.LPAREN);
          }
        case 86: break;
        case 32: 
          { return symbol(",", FullSym.COMMA);
          }
        case 87: break;
        case 33: 
          { save_zzLexicalState = CUSTOMPARAM; string.setLength(0); yybegin(STRING);
          }
        case 88: break;
        case 34: 
          { yybegin(MAPSPEC); return symbol(")",FullSym.RPAREN);
          }
        case 89: break;
        case 35: 
          { string.append('\r');
          }
        case 90: break;
        case 36: 
          { string.append('\n');
          }
        case 91: break;
        case 37: 
          { string.append('\t');
          }
        case 92: break;
        case 38: 
          { string.append('\"');
          }
        case 93: break;
        case 39: 
          { return symbol("SUBFIELD",FullSym.SUBFIELD, yytext().substring(1,2));
          }
        case 94: break;
        case 40: 
          { return symbol("NEQ",FullSym.NEQ);
          }
        case 95: break;
        case 41: 
          { return symbol("IDENTIFIER", FullSym.IDENTIFIER, yytext());
          }
        case 96: break;
        case 42: 
          { yybegin(SUBFIELDSPEC); return symbol("FIELDSPEC",FullSym.FIELDSPEC, yytext());
          }
        case 97: break;
        case 43: 
          { yybegin(MAPSPEC);      return symbol("FULLRECORD", FullSym.FULLRECORD, yytext());
          }
        case 98: break;
        case 44: 
          { return symbol("FIELDSPEC", FullSym.FIELDSPEC, yytext());
          }
        case 99: break;
        case 45: 
          { return symbol("POSITION", FullSym.POSITION, yytext());
          }
        case 100: break;
        case 46: 
          { return symbol("CHAR",FullSym.CHAR, yytext().substring(1, 2));
          }
        case 101: break;
        case 47: 
          { yybegin(CUSTOMSPEC);   return symbol("JAVA", FullSym.JAVA, yytext() );
          }
        case 102: break;
        case 48: 
          { yybegin(MAPSPEC);      return symbol("DATE", FullSym.DATE, yytext());
          }
        case 103: break;
        case 49: 
          { error("Illegal indicator specification <"+ yytext()+">");
          }
        case 104: break;
        case 50: 
          { return symbol("IND",FullSym.IND, yytext().substring(3,4));
          }
        case 105: break;
        case 51: 
          { return symbol("CHAR",FullSym.CHAR, yytext().substring(1, 3));
          }
        case 106: break;
        case 52: 
          { yybegin(CUSTOMSPEC);   return symbol("SCRIPT", FullSym.SCRIPT, yytext() );
          }
        case 107: break;
        case 53: 
          { yybegin(CUSTOMSPEC);   return symbol("CUSTOM", FullSym.CUSTOM, yytext() );
          }
        case 108: break;
        case 54: 
          { return symbol("CONTAINS",FullSym.CONTAINS);
          }
        case 109: break;
        case 55: 
          { return symbol("CUSTOM_MAP", FullSym.CUSTOM_MAP, yytext());
          }
        case 110: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case STRING: {
              yybegin(save_zzLexicalState); error("Error: End of input encountered in quoted string: "+ string.toString());
            }
            case 212: break;
            default:
              {      return sf.newSymbol("EOF", FullSym.EOF);
 }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
