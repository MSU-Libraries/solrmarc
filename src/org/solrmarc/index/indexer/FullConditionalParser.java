
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

package org.solrmarc.index.indexer;

import java_cup.runtime.*;
import java.util.List;
import java.util.Set;
import org.apache.log4j.Logger;
import java.util.ArrayList;
import java.util.Collections;
import org.solrmarc.index.collector.MultiValueCollector;
import org.solrmarc.index.extractor.AbstractMultiValueExtractor;
import org.solrmarc.index.extractor.AbstractSingleValueExtractor;
import org.solrmarc.index.extractor.AbstractValueExtractor;
import org.solrmarc.index.extractor.AbstractValueExtractorFactory;
import org.solrmarc.index.extractor.MultiValueWrapperSingleValueExtractor;
import org.solrmarc.index.extractor.impl.constant.ConstantMultiValueExtractor;
import org.solrmarc.index.extractor.impl.date.DateValueExtractorFactory;
import org.solrmarc.index.extractor.impl.direct.DirectMultiValueExtractor;
import org.solrmarc.index.extractor.impl.fullrecord.FullRecordValueExtractorFactory;
import org.solrmarc.index.mapping.AbstractMultiValueMapping;
import org.solrmarc.index.mapping.AbstractValueMappingFactory;
import org.solrmarc.index.specification.conditional.*;
import org.solrmarc.index.utils.ReflectionUtils;
import org.solrmarc.index.utils.StringReader;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import org.solrmarc.index.specification.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class FullConditionalParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return FullSym.class;
}

  /** Default constructor. */
  public FullConditionalParser() {super();}

  /** Constructor which sets the default scanner. */
  public FullConditionalParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public FullConditionalParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\002\007\000\002\002" +
    "\005\000\002\007\005\000\002\007\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\010\005\000\002" +
    "\010\003\000\002\004\010\000\002\004\010\000\002\004" +
    "\010\000\002\004\005\000\002\004\005\000\002\005\005" +
    "\000\002\005\003\000\002\006\003\000\002\006\003\000" +
    "\002\013\010\000\002\013\013\000\002\013\003\000\002" +
    "\024\003\000\002\024\002\000\002\011\003\000\002\011" +
    "\006\000\002\011\005\000\002\012\005\000\002\012\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\014\005\000\002\014\003\000\002\015\005\000\002" +
    "\015\003\000\002\016\007\000\002\016\003\000\002\017" +
    "\005\000\002\017\003\000\002\020\004\000\002\020\005" +
    "\000\002\020\004\000\002\020\003\000\002\021\005\000" +
    "\002\021\005\000\002\021\004\000\002\021\005\000\002" +
    "\021\003\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\006\000\002\022\006\000\002\022\006" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\004\007\006\001\002\000\006\014\010\026" +
    "\011\001\002\000\004\002\007\001\002\000\006\014\ufffd" +
    "\026\ufffd\001\002\000\004\002\001\001\002\000\004\007" +
    "\203\001\002\000\024\003\024\004\025\005\026\006\014" +
    "\010\022\011\016\016\013\036\023\041\027\001\002\000" +
    "\010\002\uffdd\014\uffdd\015\uffdd\001\002\000\004\036\023" +
    "\001\002\000\006\014\165\024\166\001\002\000\006\002" +
    "\ufff8\014\ufff8\001\002\000\006\002\ufff9\014\ufff9\001\002" +
    "\000\010\002\ufffb\014\ufffb\015\163\001\002\000\010\002" +
    "\uffd9\014\uffd9\015\uffd9\001\002\000\006\002\uffff\014\141" +
    "\001\002\000\006\002\ufffa\014\ufffa\001\002\000\020\002" +
    "\uffd3\014\uffd3\015\uffd3\017\uffd3\020\uffd3\037\136\040\137" +
    "\001\002\000\006\002\ufff7\014\ufff7\001\002\000\004\024" +
    "\131\001\002\000\006\014\104\024\105\001\002\000\010" +
    "\002\ufff5\014\ufff5\022\ufff5\001\002\000\010\002\ufffc\014" +
    "\ufffc\022\102\001\002\000\012\002\uffd7\014\uffd7\015\uffd7" +
    "\020\032\001\002\000\016\023\033\024\037\034\042\035" +
    "\034\036\041\040\036\001\002\000\016\023\033\024\037" +
    "\034\042\035\034\036\041\040\036\001\002\000\016\026" +
    "\050\027\047\030\045\031\043\032\046\033\044\001\002" +
    "\000\016\002\uffce\014\uffce\015\uffce\021\uffce\022\uffce\025" +
    "\uffce\001\002\000\016\026\050\027\047\030\045\031\043" +
    "\032\046\033\044\001\002\000\016\023\033\024\037\034" +
    "\042\035\034\036\041\040\036\001\002\000\014\002\uffd8" +
    "\014\uffd8\015\uffd8\021\067\022\070\001\002\000\010\034" +
    "\060\035\056\040\057\001\002\000\016\026\050\027\047" +
    "\030\045\031\043\032\046\033\044\001\002\000\010\041" +
    "\uffc3\042\uffc3\043\uffc3\001\002\000\010\041\uffc4\042\uffc4" +
    "\043\uffc4\001\002\000\010\041\uffc2\042\uffc2\043\uffc2\001" +
    "\002\000\010\041\uffc5\042\uffc5\043\uffc5\001\002\000\010" +
    "\041\uffc6\042\uffc6\043\uffc6\001\002\000\010\041\uffc7\042" +
    "\uffc7\043\uffc7\001\002\000\010\041\053\042\055\043\052" +
    "\001\002\000\016\002\uffbf\014\uffbf\015\uffbf\021\uffbf\022" +
    "\uffbf\025\uffbf\001\002\000\016\002\uffc1\014\uffc1\015\uffc1" +
    "\021\uffc1\022\uffc1\025\uffc1\001\002\000\016\002\uffcd\014" +
    "\uffcd\015\uffcd\021\uffcd\022\uffcd\025\uffcd\001\002\000\016" +
    "\002\uffc0\014\uffc0\015\uffc0\021\uffc0\022\uffc0\025\uffc0\001" +
    "\002\000\016\026\050\027\047\030\045\031\043\032\046" +
    "\033\044\001\002\000\016\026\050\027\047\030\045\031" +
    "\043\032\046\033\044\001\002\000\016\026\050\027\047" +
    "\030\045\031\043\032\046\033\044\001\002\000\010\041" +
    "\053\042\055\043\052\001\002\000\016\002\uffca\014\uffca" +
    "\015\uffca\021\uffca\022\uffca\025\uffca\001\002\000\010\041" +
    "\053\042\055\043\052\001\002\000\016\002\uffc8\014\uffc8" +
    "\015\uffc8\021\uffc8\022\uffc8\025\uffc8\001\002\000\010\041" +
    "\053\042\055\043\052\001\002\000\016\002\uffc9\014\uffc9" +
    "\015\uffc9\021\uffc9\022\uffc9\025\uffc9\001\002\000\016\023" +
    "\033\024\037\034\042\035\034\036\041\040\036\001\002" +
    "\000\016\023\033\024\037\034\042\035\034\036\041\040" +
    "\036\001\002\000\016\002\uffd1\014\uffd1\015\uffd1\021\uffd1" +
    "\022\uffd1\025\uffd1\001\002\000\016\002\uffd2\014\uffd2\015" +
    "\uffd2\021\uffd2\022\070\025\uffd2\001\002\000\010\021\067" +
    "\022\070\025\074\001\002\000\016\002\uffcf\014\uffcf\015" +
    "\uffcf\021\uffcf\022\uffcf\025\uffcf\001\002\000\010\041\053" +
    "\042\055\043\052\001\002\000\016\002\uffcb\014\uffcb\015" +
    "\uffcb\021\uffcb\022\uffcb\025\uffcb\001\002\000\010\041\053" +
    "\042\055\043\052\001\002\000\016\002\uffcc\014\uffcc\015" +
    "\uffcc\021\uffcc\022\uffcc\025\uffcc\001\002\000\016\002\uffd0" +
    "\014\uffd0\015\uffd0\021\067\022\070\025\uffd0\001\002\000" +
    "\004\041\103\001\002\000\010\002\ufff6\014\ufff6\022\ufff6" +
    "\001\002\000\006\012\113\024\114\001\002\000\004\012" +
    "\106\001\002\000\004\025\107\001\002\000\010\012\uffe7" +
    "\014\110\024\uffe7\001\002\000\006\012\uffe8\024\uffe8\001" +
    "\002\000\006\012\113\024\114\001\002\000\006\002\ufff4" +
    "\014\ufff4\001\002\000\010\002\uffe6\014\uffe6\024\125\001" +
    "\002\000\010\012\117\041\116\043\115\001\002\000\006" +
    "\014\uffdf\025\uffdf\001\002\000\006\014\uffe1\025\uffe1\001" +
    "\002\000\006\014\uffe0\025\uffe0\001\002\000\006\014\uffe2" +
    "\025\uffe2\001\002\000\006\014\122\025\123\001\002\000" +
    "\010\012\117\041\116\043\115\001\002\000\006\002\uffe4" +
    "\014\uffe4\001\002\000\006\014\uffe3\025\uffe3\001\002\000" +
    "\010\012\117\041\116\043\115\001\002\000\006\014\122" +
    "\025\127\001\002\000\006\002\uffe5\014\uffe5\001\002\000" +
    "\006\002\ufff1\014\ufff1\001\002\000\004\012\132\001\002" +
    "\000\004\025\133\001\002\000\010\012\uffe7\014\110\024" +
    "\uffe7\001\002\000\006\012\113\024\114\001\002\000\006" +
    "\002\ufff2\014\ufff2\001\002\000\016\002\uffd6\014\uffd6\015" +
    "\uffd6\017\uffd6\020\uffd6\040\140\001\002\000\014\002\uffd4" +
    "\014\uffd4\015\uffd4\017\uffd4\020\uffd4\001\002\000\014\002" +
    "\uffd5\014\uffd5\015\uffd5\017\uffd5\020\uffd5\001\002\000\012" +
    "\003\143\012\113\013\147\024\114\001\002\000\006\002" +
    "\uffed\014\uffed\001\002\000\006\002\uffe9\014\uffe9\001\002" +
    "\000\006\002\uffec\014\uffec\001\002\000\006\002\000\014" +
    "\161\001\002\000\006\002\uffee\014\uffee\001\002\000\004" +
    "\024\150\001\002\000\004\012\151\001\002\000\006\012" +
    "\uffe7\014\110\001\002\000\004\012\153\001\002\000\006" +
    "\024\155\025\154\001\002\000\006\002\uffeb\014\uffeb\001" +
    "\002\000\010\012\117\041\116\043\115\001\002\000\006" +
    "\014\122\025\157\001\002\000\004\025\160\001\002\000" +
    "\006\002\uffea\014\uffea\001\002\000\012\003\143\012\113" +
    "\013\147\024\114\001\002\000\006\002\uffef\014\uffef\001" +
    "\002\000\006\016\013\036\023\001\002\000\010\002\uffde" +
    "\014\uffde\015\uffde\001\002\000\006\012\113\024\114\001" +
    "\002\000\004\012\167\001\002\000\004\025\170\001\002" +
    "\000\010\012\uffe7\014\110\024\uffe7\001\002\000\006\012" +
    "\113\024\114\001\002\000\006\002\ufff3\014\ufff3\001\002" +
    "\000\006\002\ufff0\014\ufff0\001\002\000\006\015\uffdb\017" +
    "\uffdb\001\002\000\006\015\177\017\176\001\002\000\004" +
    "\020\201\001\002\000\004\036\023\001\002\000\006\015" +
    "\uffdc\017\uffdc\001\002\000\016\023\033\024\037\034\042" +
    "\035\034\036\041\040\036\001\002\000\014\002\uffda\014" +
    "\uffda\015\uffda\021\067\022\070\001\002\000\006\014\ufffe" +
    "\026\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\006\002\004\007\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\020\004\014\010\027\014" +
    "\016\016\011\017\017\020\030\001\001\000\002\001\001" +
    "\000\006\015\174\020\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\037\022\034\001\001\000\006\021\100\022\034" +
    "\001\001\000\004\026\076\001\001\000\002\001\001\000" +
    "\004\026\074\001\001\000\006\021\072\022\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\064\001" +
    "\001\000\004\026\062\001\001\000\004\026\060\001\001" +
    "\000\004\023\061\001\001\000\002\001\001\000\004\023" +
    "\063\001\001\000\002\001\001\000\004\023\065\001\001" +
    "\000\002\001\001\000\006\021\071\022\034\001\001\000" +
    "\006\021\070\022\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\075\001\001\000\002\001\001\000\004\023\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\110\001\001\000\002\001" +
    "\001\000\004\011\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\120\025\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\125\025\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\133\001\001" +
    "\000\004\011\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\144" +
    "\006\145\011\141\013\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\155\025\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\161" +
    "\011\141\013\143\001\001\000\002\001\001\000\010\016" +
    "\163\017\017\020\030\001\001\000\002\001\001\000\004" +
    "\011\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\170\001\001\000\004\011\171\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\177\001\001\000\002" +
    "\001\001\000\006\021\201\022\034\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$FullConditionalParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$FullConditionalParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$FullConditionalParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private final static Logger logger = Logger.getLogger(ValueIndexerFactory.class);

    static FullConditionalScanner scanner;
    static boolean parser_debug;
    static List<IndexerSpecException> parser_errors = null;
    static FullRecordValueExtractorFactory fullFactory = new FullRecordValueExtractorFactory();
    static DateValueExtractorFactory dateFactory = new DateValueExtractorFactory();
    static String cacheOfStrToParse;
    static MultiValueCollector MULTI_VALUE_COLLECTOR = new MultiValueCollector();
    private ValueIndexerFactory valueIndexerFactory = null;
    private List<AbstractValueMappingFactory> mappingFactories = null;
    private List<AbstractValueExtractorFactory> extractorFactories = null;
    
    public static void setParserDebug(boolean b) { parser_debug = b; } 
    public static boolean shouldParserDebug()    { return(parser_debug); }
    public FullConditionalParser(boolean debug) throws IllegalAccessException, InstantiationException 
    { 
        super(debug ? new VerboseSymbolFactory() : new ComplexSymbolFactory());
        parser_debug = debug;
        this.scanner = new FullConditionalScanner((ComplexSymbolFactory)getSymbolFactory());
        this.setScanner(this.scanner);
    }
    
    
    public void setFactories(ValueIndexerFactory vif, List<AbstractValueExtractorFactory> extractorFactories, List<AbstractValueMappingFactory> mappingFactories)
    {
        this.valueIndexerFactory = vif;
        this.extractorFactories  = extractorFactories;
        this.mappingFactories = mappingFactories;  
    }
    
    public MultiValueIndexer parse(String strToParse, boolean debug)
    {
        cacheOfStrToParse = strToParse;
        Symbol parse_tree = null;
        MultiValueIndexer result = null;
        parser_errors = new ArrayList<IndexerSpecException>();
        scanner.startParse(strToParse);
        try{
            if (debug)
                parse_tree = this.debug_parse();
            else
                parse_tree = this.parse();
        }
        catch (IndexerSpecException ise) {
            parser_errors.add(ise);
        }
        catch (Exception e) {
            parser_errors.add(new IndexerSpecException(e, " "));
            //parser_errors.add(" Input Specification "+strToParse);
        } 
        finally {
        }
        if (parse_tree != null) 
        {
            result = (MultiValueIndexer) parse_tree.value;
            if (result != null)
            {
                result.setSpecLabel(strToParse);
             //   result.setParseErrors(parser_errors);
            }
        }
        return(result);     
    }
   
    public MultiValueIndexer parse(String strToParse)
    {
        return(parse(strToParse, parser_debug));
    }
    
    private static String toDelimitedString(String[] strs, String delimiter)
    {
        StringBuilder strb = new StringBuilder();
        for (String str : strs)
        {
          strb.append(str).append(delimiter);
        }
        return strb.substring(0, strb.length() - delimiter.length());
     }
    
    
    
    private AbstractValueExtractor<?> createCustomExtractor(String parm1, String parm2, List<String> mapParams)
    {
        String[] mapParts =new String[mapParams.size()+2];
        mapParts[0] = parm1;
        mapParts[1] = parm2;
        System.arraycopy(mapParams.toArray(new String[0]), 0, mapParts, 2, mapParams.size());
        mapParams.toArray(new String[0]);
        for (final AbstractValueExtractorFactory factory : extractorFactories)
        {
            if (factory.canHandle("CUP Parser", mapParts[0]))
            {
                return factory.createExtractor("CUP Parser", mapParts);
            }
        }
        throw new IndexerSpecException("No indexer factory found for: " + toDelimitedString(mapParts, " "));
    }
   
//    private AbstractValueExtractor<?> createExtractor(final String solrFieldName, final String[] mapParts)
//    {
//        for (final AbstractValueExtractorFactory factory : extractorFactories)
//        {
//            if (factory.canHandle(solrFieldName, mapParts[0]))
//            {
//                return factory.createExtractor(solrFieldName, mapParts);
//            }
//        }
//        throw new IndexerSpecException("No indexer factory found for: " + toDelimitedString(mapParts, " "));
//    }
    
    private AbstractMultiValueMapping createMultiValueMapping(List<String> mapParams)
    {
    	if (this.mappingFactories == null) 
        {
    		try {
				this.mappingFactories = createMappingFactories(ReflectionUtils.getMappingFactoryClasses());
			}
    		catch (IllegalAccessException | InstantiationException e) {
    			 throw new IndexerSpecException("Could not instantiate mapping factory\n" + mappingFactories.toString().replaceAll(",", ",\n"));
			}
        }
    	String[] mapParts = mapParams.toArray(new String[0]);
    	for (final AbstractValueMappingFactory mappingFactory : mappingFactories)
        {
            if (mappingFactory.canHandle(mapParts[0]))
            {
                return mappingFactory.createMultiValueMapping(mapParts);
            }
        }
        throw new IndexerSpecException("Could not handle map descriptor: " + toDelimitedString(mapParts, " ")); 
        // + "\nLoaded impl factories:\n" + mappingFactories.toString().replaceAll(",", ",\n"));
    }

    private List<AbstractValueMappingFactory> createMappingFactories(final Set<Class<? extends AbstractValueMappingFactory>> factoryClasses) throws IllegalAccessException, InstantiationException
    {
        final List<AbstractValueMappingFactory> factories = new ArrayList<>(factoryClasses.size());
        for (final Class<? extends AbstractValueMappingFactory> extractorFactoryClass : factoryClasses)
        {
            logger.trace("Create value mapping factory for  s " + extractorFactoryClass);
            final AbstractValueMappingFactory factory = extractorFactoryClass.newInstance();
            factories.add(factory);
        }
        return factories;
    }

    private AbstractMultiValueExtractor makeMultiValueExtractor(Object extractor)
    {
        if (AbstractMultiValueExtractor.class.isAssignableFrom(extractor.getClass()))   
        {
            return((AbstractMultiValueExtractor)extractor);
        }
        else if (AbstractSingleValueExtractor.class.isAssignableFrom(extractor.getClass())) 
        {
            return(new MultiValueWrapperSingleValueExtractor((AbstractSingleValueExtractor)extractor));
        }
        return(null);
    }
    
    public static final List<IndexerSpecException> getErrors()
    {
        if (scanner.getScannerErrors().size() == 0)
            return(parser_errors);
        List<IndexerSpecException> allErrors = new ArrayList<IndexerSpecException>();
        allErrors.addAll(parser_errors);
        for (String errMsg : scanner.getScannerErrors())
        {
            allErrors.add(new IndexerSpecException(errMsg));
        }
        return(allErrors);
    }
    
    public static final void addError(String errorMsg)
    {
        parser_errors.add(new IndexerSpecException(errorMsg));
    }
    
    public static final void addError(IndexerSpecException exception)
    {
        parser_errors.add(exception);
    }
    
    @Override
    public void report_error(String message, Object info)
    {
        ComplexSymbol top = (ComplexSymbol)stack.peek();
        if (info instanceof ComplexSymbol)
        {
            ComplexSymbol cs = (ComplexSymbol)info;
            addError(message+" at input symbol \""+cs.getName()+"\" following symbol "+ top.getName() + 
                    " (with value of : "+ cacheOfStrToParse.substring(top.left, top.right) +" )");
            return;
        }
    }
   
    protected void my_report_expected_token_ids()
    {
        List<Integer> ids = expected_token_ids();
        ArrayList<String> list = new ArrayList<String>();
        for (Integer expected : ids)
        {
            list.add(symbl_name_from_id(expected));
        }
        addError("instead expected token classes are "+list.toString());
    }
    
    public void syntax_error(Symbol cur_token)
    {
        report_error("Syntax error", cur_token);
        my_report_expected_token_ids();
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$FullConditionalParser$actions {
  private final FullConditionalParser parser;

  /** Constructor */
  CUP$FullConditionalParser$actions(FullConditionalParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$FullConditionalParser$do_action_part00000000(
    int                        CUP$FullConditionalParser$act_num,
    java_cup.runtime.lr_parser CUP$FullConditionalParser$parser,
    java.util.Stack            CUP$FullConditionalParser$stack,
    int                        CUP$FullConditionalParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$FullConditionalParser$result;

      /* select the action based on the action number */
      switch (CUP$FullConditionalParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= index_spec EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		AbstractValueIndexer< ? > start_val = (AbstractValueIndexer< ? >)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		RESULT = start_val;
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$FullConditionalParser$parser.done_parsing();
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // index_spec ::= field_names EQU extractor COMMA mapping_specs 
            {
              AbstractValueIndexer< ? > RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-4)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-4)).xright;
		List<String> s = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-4)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		AbstractValueExtractor< ? > e = (AbstractValueExtractor< ? >)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		List<List<String>> m = (List<List<String>>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = valueIndexerFactory.makeMultiValueIndexer(cacheOfStrToParse, s, e, m); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("index_spec",0, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-4)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // index_spec ::= field_names EQU extractor 
            {
              AbstractValueIndexer< ? > RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		List<String> s = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		AbstractValueExtractor< ? > e = (AbstractValueExtractor< ? >)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new MultiValueIndexer(s, (AbstractMultiValueExtractor)e, new AbstractMultiValueMapping[0], MULTI_VALUE_COLLECTOR); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("index_spec",0, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // field_names ::= field_names COMMA FIELDNAME 
            {
              List<String> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		List<String> s = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = s; s.add(n); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("field_names",5, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // field_names ::= FIELDNAME 
            {
              List<String> RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new ArrayList<String>(); RESULT.add(n); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("field_names",5, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // extractor ::= strings 
            {
              AbstractValueExtractor< ? > RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new ConstantMultiValueExtractor(l); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("extractor",1, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // extractor ::= field_spec 
            {
              AbstractValueExtractor< ? > RESULT =null;
		Location fsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location fsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		CompositeSpecification fs = (CompositeSpecification)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new DirectMultiValueExtractor(fs);  
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("extractor",1, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // extractor ::= FULLRECORD 
            {
              AbstractValueExtractor< ? > RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = makeMultiValueExtractor(fullFactory.createExtractor("CUP Parser", new StringReader(s))); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("extractor",1, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // extractor ::= DATE 
            {
              AbstractValueExtractor< ? > RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = dateFactory.createExtractor("CUP Parser", new StringReader(s)); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("extractor",1, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // extractor ::= custom_extractor 
            {
              AbstractValueExtractor< ? > RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		AbstractValueExtractor< ? > e = (AbstractValueExtractor< ? >)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = e; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("extractor",1, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // extractor ::= error 
            {
              AbstractValueExtractor< ? > RESULT =null;
		 RESULT = null; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("extractor",1, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // strings ::= strings OR QUOTEDSTR 
            {
              List<String> RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = l; l.add(s); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("strings",6, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // strings ::= QUOTEDSTR 
            {
              List<String> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new ArrayList<String>(); RESULT.add(s); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("strings",6, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // custom_extractor ::= CUSTOM LPAREN IDENTIFIER RPAREN opt_comma method_plus_params 
            {
              AbstractValueExtractor< ? > RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)).xright;
		String t = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xright;
		String m = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = createCustomExtractor(t, m, l); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("custom_extractor",2, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // custom_extractor ::= JAVA LPAREN IDENTIFIER RPAREN opt_comma method_plus_params 
            {
              AbstractValueExtractor< ? > RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)).xright;
		String t = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xright;
		String m = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = createCustomExtractor(t, m, l); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("custom_extractor",2, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // custom_extractor ::= SCRIPT LPAREN IDENTIFIER RPAREN opt_comma method_plus_params 
            {
              AbstractValueExtractor< ? > RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)).xright;
		String t = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xright;
		String m = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = createCustomExtractor(t, m, l); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("custom_extractor",2, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // custom_extractor ::= CUSTOM COMMA method_plus_params 
            {
              AbstractValueExtractor< ? > RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		String t = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = createCustomExtractor(t, null, l); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("custom_extractor",2, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // custom_extractor ::= JAVA COMMA method_plus_params 
            {
              AbstractValueExtractor< ? > RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		String t = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = createCustomExtractor(t, null, l); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("custom_extractor",2, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // mapping_specs ::= mapping_specs COMMA mapping_spec 
            {
              List<List<String>> RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		List<List<String>> l = (List<List<String>>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		List<String> m = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = l; if (m != null) { l.add(m);} 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("mapping_specs",3, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // mapping_specs ::= mapping_spec 
            {
              List<List<String>> RESULT =null;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		List<String> m = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new ArrayList<List<String>>(); if (m != null) { RESULT.add(m);} 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("mapping_specs",3, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // mapping_spec ::= method_plus_params 
            {
              List<String> RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("mapping_spec",4, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // mapping_spec ::= custom_map_spec 
            {
              List<String> RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("mapping_spec",4, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // custom_map_spec ::= CUSTOM_MAP LPAREN IDENTIFIER opt_comma IDENTIFIER RPAREN 
            {
              List<String> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)).value;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xright;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).value;
		Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		 RESULT = new ArrayList<String>(); RESULT.add(s); RESULT.add(s1); RESULT.add(s2); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("custom_map_spec",9, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // custom_map_spec ::= CUSTOM_MAP LPAREN IDENTIFIER opt_comma IDENTIFIER LPAREN params RPAREN RPAREN 
            {
              List<String> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-8)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-8)).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-8)).value;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-6)).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-6)).xright;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-6)).value;
		Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-4)).xleft;
		Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-4)).xright;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-4)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		 RESULT = l; RESULT.add(0, s); RESULT.add(1, s1); RESULT.add(2, s2); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("custom_map_spec",9, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-8)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // custom_map_spec ::= error 
            {
              List<String> RESULT =null;
		 FullConditionalParser.addError("Malformed custom_map reference : Should be \ncustom_map(fully.qualified.class.Name method)\n or  custom_map(fully.qualified.class.Name method(parm1, parm2))"); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("custom_map_spec",9, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // opt_comma ::= COMMA 
            {
              String RESULT =null;

              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("opt_comma",18, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // opt_comma ::= 
            {
              String RESULT =null;

              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("opt_comma",18, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // method_plus_params ::= IDENTIFIER 
            {
              List<String> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = Collections.singletonList(s); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("method_plus_params",7, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // method_plus_params ::= IDENTIFIER LPAREN params RPAREN 
            {
              List<String> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		 RESULT = l; RESULT.add(0, s); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("method_plus_params",7, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // method_plus_params ::= LPAREN params RPAREN 
            {
              List<String> RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		 RESULT = l; RESULT.add(0, "(this).properties"); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("method_plus_params",7, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // params ::= params COMMA param 
            {
              List<String> RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = l; l.add(s); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("params",8, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // params ::= param 
            {
              List<String> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new ArrayList<String>(); RESULT.add(s); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("params",8, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // param ::= QUOTEDSTR 
            {
              String RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = s; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("param",19, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // param ::= IDENTIFIER 
            {
              String RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = s; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("param",19, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // param ::= NUMBER 
            {
              String RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = s; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("param",19, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // field_spec ::= field_spec COLON field_spec_part 
            {
              CompositeSpecification RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		CompositeSpecification s = (CompositeSpecification)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		CompositeSpecification s1 = (CompositeSpecification)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 s.addSpec(s1); RESULT = s; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec",10, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // field_spec ::= field_spec_part 
            {
              CompositeSpecification RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		CompositeSpecification s = (CompositeSpecification)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new CompositeSpecification(s); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec",10, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // field_spec_simple ::= field_spec_simple COLON field_spec_part_simple 
            {
              CompositeSpecification RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		CompositeSpecification s = (CompositeSpecification)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		SingleSpecification s1 = (SingleSpecification)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 s.addSpec(s1); RESULT = s; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_simple",11, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // field_spec_simple ::= field_spec_part_simple 
            {
              CompositeSpecification RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		SingleSpecification s = (SingleSpecification)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new CompositeSpecification(s); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_simple",11, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // field_spec_part ::= LBRACE field_spec_simple RBRACE QUESTION expr 
            {
              CompositeSpecification RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xright;
		CompositeSpecification s = (CompositeSpecification)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		Condition e = (Condition)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 s.addConditional(e); RESULT = s; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part",12, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-4)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // field_spec_part ::= field_spec_part_complex 
            {
              CompositeSpecification RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		SingleSpecification s = (SingleSpecification)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new CompositeSpecification(s); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part",12, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // field_spec_part_complex ::= field_spec_part_simple QUESTION expr 
            {
              SingleSpecification RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		SingleSpecification s = (SingleSpecification)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		Condition e = (Condition)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = s; s.addConditional(e); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part_complex",13, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // field_spec_part_complex ::= field_spec_part_simple 
            {
              SingleSpecification RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		SingleSpecification s = (SingleSpecification)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = s; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part_complex",13, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // field_spec_part_simple ::= FIELDSPEC SUBFIELDSPEC 
            {
              SingleSpecification RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		String f = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		Location sfxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sfxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String sf = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = AbstractSpecificationFactory.makeSingleSpecification(f, sf); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part_simple",14, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // field_spec_part_simple ::= FIELDSPEC SUBFIELDSPEC POSITION 
            {
              SingleSpecification RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		String f = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location sfxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location sfxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		String sf = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String p = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = AbstractSpecificationFactory.makeSingleSpecification(f, sf, p); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part_simple",14, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // field_spec_part_simple ::= FIELDSPEC POSITION 
            {
              SingleSpecification RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		String f = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String p = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = AbstractSpecificationFactory.makeSingleSpecification(f, null, p); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part_simple",14, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // field_spec_part_simple ::= FIELDSPEC 
            {
              SingleSpecification RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String f = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = AbstractSpecificationFactory.makeSingleSpecification(f, null); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part_simple",14, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= expr AND expr 
            {
              Condition RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		Condition e1 = (Condition)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		Condition e2 = (Condition)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new ConditionComposite(e1, e2, FullSym.AND);  
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= expr OR expr 
            {
              Condition RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		Condition e1 = (Condition)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		Condition e2 = (Condition)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new ConditionComposite(e1, e2, FullSym.OR);  
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= NOT expr 
            {
              Condition RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		Condition e = (Condition)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new ConditionComposite(e, null, FullSym.NOT); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= LPAREN expr RPAREN 
            {
              Condition RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		Condition e = (Condition)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		 RESULT = e; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= expr_part 
            {
              Condition RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		Condition e = (Condition)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = e; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr_part ::= SUBFIELD op value 
            {
              Condition RESULT =null;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new ConditionSubfield(s1, s2, ((int)i)); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("expr_part",16, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr_part ::= IND op value 
            {
              Condition RESULT =null;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new ConditionIndicator(s1, s2, ((int)i)); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("expr_part",16, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr_part ::= POSITION op value 
            {
              Condition RESULT =null;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new ConditionPosition(s1, s2, ((int)i)); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("expr_part",16, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr_part ::= FIELDSPEC SUBFIELD op value 
            {
              Condition RESULT =null;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xright;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).value;
		Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		Location s3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location s3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s3 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new ConditionSubfield(s1, s2, s3, ((int)i)); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("expr_part",16, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr_part ::= FIELDSPEC IND op value 
            {
              Condition RESULT =null;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xright;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).value;
		Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		Location s3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location s3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s3 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new ConditionIndicator(s1, s2, s3, ((int)i)); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("expr_part",16, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr_part ::= FIELDSPEC POSITION op value 
            {
              Condition RESULT =null;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xright;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).value;
		Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		Location s3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location s3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s3 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new ConditionPosition(s1, s2, s3, ((int)i)); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("expr_part",16, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // op ::= EQU 
            {
              Integer RESULT =null;
		 RESULT = new Integer(FullSym.EQU); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("op",20, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // op ::= NEQ 
            {
              Integer RESULT =null;
		 RESULT = new Integer(FullSym.NEQ); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("op",20, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // op ::= MATCH 
            {
              Integer RESULT =null;
		 RESULT = new Integer(FullSym.MATCH); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("op",20, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // op ::= CONTAINS 
            {
              Integer RESULT =null;
		 RESULT = new Integer(FullSym.CONTAINS); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("op",20, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // op ::= LT 
            {
              Integer RESULT =null;
		 RESULT = new Integer(FullSym.LT); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("op",20, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // op ::= GT 
            {
              Integer RESULT =null;
		 RESULT = new Integer(FullSym.GT); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("op",20, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // value ::= QUOTEDSTR 
            {
              String RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = s; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("value",17, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // value ::= CHAR 
            {
              String RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = s; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("value",17, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // value ::= NUMBER 
            {
              String RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = s; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("value",17, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$FullConditionalParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$FullConditionalParser$do_action(
    int                        CUP$FullConditionalParser$act_num,
    java_cup.runtime.lr_parser CUP$FullConditionalParser$parser,
    java.util.Stack            CUP$FullConditionalParser$stack,
    int                        CUP$FullConditionalParser$top)
    throws java.lang.Exception
    {
              return CUP$FullConditionalParser$do_action_part00000000(
                               CUP$FullConditionalParser$act_num,
                               CUP$FullConditionalParser$parser,
                               CUP$FullConditionalParser$stack,
                               CUP$FullConditionalParser$top);
    }
}

}
