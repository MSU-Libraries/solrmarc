
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

package org.solrmarc.index.indexer;

import java_cup.runtime.*;
import java.util.List;
import java.util.Set;
import org.apache.log4j.Logger;
import java.util.ArrayList;
import java.util.Collections;
import org.solrmarc.index.collector.MultiValueCollector;
import org.solrmarc.index.extractor.AbstractMultiValueExtractor;
import org.solrmarc.index.extractor.AbstractSingleValueExtractor;
import org.solrmarc.index.extractor.AbstractValueExtractor;
import org.solrmarc.index.extractor.AbstractValueExtractorFactory;
import org.solrmarc.index.extractor.MultiValueWrapperSingleValueExtractor;
import org.solrmarc.index.extractor.impl.constant.ConstantMultiValueExtractor;
import org.solrmarc.index.extractor.impl.date.DateValueExtractorFactory;
import org.solrmarc.index.extractor.impl.direct.DirectMultiValueExtractor;
import org.solrmarc.index.extractor.impl.fullrecord.FullRecordValueExtractorFactory;
import org.solrmarc.index.mapping.AbstractMultiValueMapping;
import org.solrmarc.index.mapping.AbstractValueMappingFactory;
import org.solrmarc.index.specification.conditional.*;
import org.solrmarc.index.utils.StringReader;
import org.solrmarc.tools.Utils;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import org.solrmarc.index.specification.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class FullConditionalParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return FullSym.class;
}

  /** Default constructor. */
  public FullConditionalParser() {super();}

  /** Constructor which sets the default scanner. */
  public FullConditionalParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public FullConditionalParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\002\005\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\010\005\000\002\010\003\000\002\004\010\000\002" +
    "\004\010\000\002\004\010\000\002\004\005\000\002\004" +
    "\005\000\002\005\005\000\002\005\003\000\002\006\003" +
    "\000\002\006\003\000\002\013\010\000\002\013\013\000" +
    "\002\013\003\000\002\024\003\000\002\024\002\000\002" +
    "\011\003\000\002\011\006\000\002\011\005\000\002\012" +
    "\005\000\002\012\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\014\005\000\002\014\003\000" +
    "\002\015\005\000\002\015\003\000\002\016\007\000\002" +
    "\016\003\000\002\017\005\000\002\017\003\000\002\020" +
    "\004\000\002\020\005\000\002\020\004\000\002\020\003" +
    "\000\002\021\005\000\002\021\005\000\002\021\004\000" +
    "\002\021\005\000\002\021\003\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\006\000\002\022" +
    "\006\000\002\022\006\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\024\003\017\004\020\005\021\006\010\010" +
    "\015\011\011\016\006\036\016\041\022\001\002\000\010" +
    "\002\uffdf\014\uffdf\015\uffdf\001\002\000\004\002\176\001" +
    "\002\000\004\036\016\001\002\000\006\002\ufffa\014\ufffa" +
    "\001\002\000\006\014\160\024\161\001\002\000\006\002" +
    "\ufffb\014\ufffb\001\002\000\010\002\ufffd\014\ufffd\015\156" +
    "\001\002\000\010\002\uffdb\014\uffdb\015\uffdb\001\002\000" +
    "\006\002\uffff\014\134\001\002\000\006\002\ufffc\014\ufffc" +
    "\001\002\000\020\002\uffd5\014\uffd5\015\uffd5\017\uffd5\020" +
    "\uffd5\037\131\040\132\001\002\000\006\002\ufff9\014\ufff9" +
    "\001\002\000\004\024\124\001\002\000\006\014\077\024" +
    "\100\001\002\000\010\002\ufff7\014\ufff7\022\ufff7\001\002" +
    "\000\010\002\ufffe\014\ufffe\022\075\001\002\000\012\002" +
    "\uffd9\014\uffd9\015\uffd9\020\025\001\002\000\016\023\026" +
    "\024\033\034\035\035\030\036\034\040\031\001\002\000" +
    "\016\023\026\024\033\034\035\035\030\036\034\040\031" +
    "\001\002\000\016\002\uffd0\014\uffd0\015\uffd0\021\uffd0\022" +
    "\uffd0\025\uffd0\001\002\000\016\026\043\027\042\030\037" +
    "\031\036\032\041\033\040\001\002\000\016\026\043\027" +
    "\042\030\037\031\036\032\041\033\040\001\002\000\014" +
    "\002\uffda\014\uffda\015\uffda\021\064\022\065\001\002\000" +
    "\016\023\026\024\033\034\035\035\030\036\034\040\031" +
    "\001\002\000\010\034\053\035\051\040\052\001\002\000" +
    "\016\026\043\027\042\030\037\031\036\032\041\033\040" +
    "\001\002\000\010\041\uffc5\042\uffc5\043\uffc5\001\002\000" +
    "\010\041\uffc4\042\uffc4\043\uffc4\001\002\000\010\041\uffc6" +
    "\042\uffc6\043\uffc6\001\002\000\010\041\uffc7\042\uffc7\043" +
    "\uffc7\001\002\000\010\041\uffc8\042\uffc8\043\uffc8\001\002" +
    "\000\010\041\uffc9\042\uffc9\043\uffc9\001\002\000\010\041" +
    "\046\042\050\043\045\001\002\000\016\002\uffc1\014\uffc1" +
    "\015\uffc1\021\uffc1\022\uffc1\025\uffc1\001\002\000\016\002" +
    "\uffc3\014\uffc3\015\uffc3\021\uffc3\022\uffc3\025\uffc3\001\002" +
    "\000\016\002\uffcf\014\uffcf\015\uffcf\021\uffcf\022\uffcf\025" +
    "\uffcf\001\002\000\016\002\uffc2\014\uffc2\015\uffc2\021\uffc2" +
    "\022\uffc2\025\uffc2\001\002\000\016\026\043\027\042\030" +
    "\037\031\036\032\041\033\040\001\002\000\016\026\043" +
    "\027\042\030\037\031\036\032\041\033\040\001\002\000" +
    "\016\026\043\027\042\030\037\031\036\032\041\033\040" +
    "\001\002\000\010\041\046\042\050\043\045\001\002\000" +
    "\016\002\uffcc\014\uffcc\015\uffcc\021\uffcc\022\uffcc\025\uffcc" +
    "\001\002\000\010\041\046\042\050\043\045\001\002\000" +
    "\016\002\uffca\014\uffca\015\uffca\021\uffca\022\uffca\025\uffca" +
    "\001\002\000\010\041\046\042\050\043\045\001\002\000" +
    "\016\002\uffcb\014\uffcb\015\uffcb\021\uffcb\022\uffcb\025\uffcb" +
    "\001\002\000\010\021\064\022\065\025\063\001\002\000" +
    "\016\002\uffd1\014\uffd1\015\uffd1\021\uffd1\022\uffd1\025\uffd1" +
    "\001\002\000\016\023\026\024\033\034\035\035\030\036" +
    "\034\040\031\001\002\000\016\023\026\024\033\034\035" +
    "\035\030\036\034\040\031\001\002\000\016\002\uffd3\014" +
    "\uffd3\015\uffd3\021\uffd3\022\uffd3\025\uffd3\001\002\000\016" +
    "\002\uffd4\014\uffd4\015\uffd4\021\uffd4\022\065\025\uffd4\001" +
    "\002\000\010\041\046\042\050\043\045\001\002\000\016" +
    "\002\uffcd\014\uffcd\015\uffcd\021\uffcd\022\uffcd\025\uffcd\001" +
    "\002\000\010\041\046\042\050\043\045\001\002\000\016" +
    "\002\uffce\014\uffce\015\uffce\021\uffce\022\uffce\025\uffce\001" +
    "\002\000\016\002\uffd2\014\uffd2\015\uffd2\021\064\022\065" +
    "\025\uffd2\001\002\000\004\041\076\001\002\000\010\002" +
    "\ufff8\014\ufff8\022\ufff8\001\002\000\006\012\106\024\107" +
    "\001\002\000\004\012\101\001\002\000\004\025\102\001" +
    "\002\000\010\012\uffe9\014\103\024\uffe9\001\002\000\006" +
    "\012\uffea\024\uffea\001\002\000\006\012\106\024\107\001" +
    "\002\000\006\002\ufff6\014\ufff6\001\002\000\010\002\uffe8" +
    "\014\uffe8\024\120\001\002\000\010\012\112\041\111\043" +
    "\110\001\002\000\006\014\uffe1\025\uffe1\001\002\000\006" +
    "\014\uffe3\025\uffe3\001\002\000\006\014\uffe2\025\uffe2\001" +
    "\002\000\006\014\uffe4\025\uffe4\001\002\000\006\014\115" +
    "\025\116\001\002\000\010\012\112\041\111\043\110\001" +
    "\002\000\006\002\uffe6\014\uffe6\001\002\000\006\014\uffe5" +
    "\025\uffe5\001\002\000\010\012\112\041\111\043\110\001" +
    "\002\000\006\014\115\025\122\001\002\000\006\002\uffe7" +
    "\014\uffe7\001\002\000\006\002\ufff3\014\ufff3\001\002\000" +
    "\004\012\125\001\002\000\004\025\126\001\002\000\010" +
    "\012\uffe9\014\103\024\uffe9\001\002\000\006\012\106\024" +
    "\107\001\002\000\006\002\ufff4\014\ufff4\001\002\000\016" +
    "\002\uffd8\014\uffd8\015\uffd8\017\uffd8\020\uffd8\040\133\001" +
    "\002\000\014\002\uffd6\014\uffd6\015\uffd6\017\uffd6\020\uffd6" +
    "\001\002\000\014\002\uffd7\014\uffd7\015\uffd7\017\uffd7\020" +
    "\uffd7\001\002\000\012\003\136\012\106\013\142\024\107" +
    "\001\002\000\006\002\uffef\014\uffef\001\002\000\006\002" +
    "\uffeb\014\uffeb\001\002\000\006\002\uffee\014\uffee\001\002" +
    "\000\006\002\000\014\154\001\002\000\006\002\ufff0\014" +
    "\ufff0\001\002\000\004\024\143\001\002\000\004\012\144" +
    "\001\002\000\006\012\uffe9\014\103\001\002\000\004\012" +
    "\146\001\002\000\006\024\150\025\147\001\002\000\006" +
    "\002\uffed\014\uffed\001\002\000\010\012\112\041\111\043" +
    "\110\001\002\000\006\014\115\025\152\001\002\000\004" +
    "\025\153\001\002\000\006\002\uffec\014\uffec\001\002\000" +
    "\012\003\136\012\106\013\142\024\107\001\002\000\006" +
    "\002\ufff1\014\ufff1\001\002\000\006\016\006\036\016\001" +
    "\002\000\010\002\uffe0\014\uffe0\015\uffe0\001\002\000\006" +
    "\012\106\024\107\001\002\000\004\012\162\001\002\000" +
    "\004\025\163\001\002\000\010\012\uffe9\014\103\024\uffe9" +
    "\001\002\000\006\012\106\024\107\001\002\000\006\002" +
    "\ufff5\014\ufff5\001\002\000\006\002\ufff2\014\ufff2\001\002" +
    "\000\006\015\uffdd\017\uffdd\001\002\000\006\015\172\017" +
    "\171\001\002\000\004\020\174\001\002\000\004\036\016" +
    "\001\002\000\006\015\uffde\017\uffde\001\002\000\016\023" +
    "\026\024\033\034\035\035\030\036\034\040\031\001\002" +
    "\000\014\002\uffdc\014\uffdc\015\uffdc\021\064\022\065\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\022\002\004\003\013\004\006\010\022\014" +
    "\011\016\003\017\012\020\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\167\020\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\031\022\026\001\001\000\006" +
    "\021\073\022\026\001\001\000\002\001\001\000\004\026" +
    "\071\001\001\000\004\026\067\001\001\000\002\001\001" +
    "\000\006\021\061\022\026\001\001\000\002\001\001\000" +
    "\004\026\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\057\001\001\000\004\026\055\001\001\000\004" +
    "\026\053\001\001\000\004\023\054\001\001\000\002\001" +
    "\001\000\004\023\056\001\001\000\002\001\001\000\004" +
    "\023\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\066\022\026\001\001\000\006" +
    "\021\065\022\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\070\001\001\000\002\001\001\000\004" +
    "\023\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\103\001" +
    "\001\000\002\001\001\000\004\011\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\113\025\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\120" +
    "\025\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\126\001\001\000\004\011\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\137\006\140\011\134\013\136\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\150\025\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\154\011\134\013\136\001\001\000\002\001" +
    "\001\000\010\016\156\017\012\020\023\001\001\000\002" +
    "\001\001\000\004\011\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\163\001\001\000\004\011\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\172" +
    "\001\001\000\002\001\001\000\006\021\174\022\026\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$FullConditionalParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$FullConditionalParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$FullConditionalParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private final static Logger logger = Logger.getLogger(ValueIndexerFactory.class);

    static FullConditionalScanner scanner;
    static boolean parser_debug;
    static List<IndexerSpecException> parser_errors = null;
    static FullRecordValueExtractorFactory fullFactory = new FullRecordValueExtractorFactory();
    static DateValueExtractorFactory dateFactory = new DateValueExtractorFactory();
    static String cacheOfStrToParse;
    static String cacheOfSolrField;
    private ValueIndexerFactory valueIndexerFactory = null;
    private List<AbstractValueMappingFactory> mappingFactories = null;
    private List<AbstractValueExtractorFactory> extractorFactories = null;
    
    public static void setParserDebug(boolean b) { parser_debug = b; } 
    public static boolean shouldParserDebug()    { return(parser_debug); }
    public FullConditionalParser(boolean debug) throws IllegalAccessException, InstantiationException 
    { 
        super(debug ? new VerboseSymbolFactory() : new ComplexSymbolFactory());
        parser_debug = debug;
        this.scanner = new FullConditionalScanner((ComplexSymbolFactory)getSymbolFactory());
        this.setScanner(this.scanner);
    }
    
    public void setFactories(ValueIndexerFactory vif, List<AbstractValueExtractorFactory> extractorFactories, List<AbstractValueMappingFactory> mappingFactories)
    {
        this.valueIndexerFactory = vif;
        this.extractorFactories = extractorFactories;
        this.mappingFactories = mappingFactories;  
    }
    
    public MultiValueIndexer parse(String solrFields, String strToParse, boolean debug)
    {
        cacheOfSolrField = solrFields;
        cacheOfStrToParse = strToParse;
        Symbol parse_tree = null;
        MultiValueIndexer result = null;
        parser_errors = new ArrayList<IndexerSpecException>();
        scanner.startParse(strToParse);
        try{
            if (debug)
                parse_tree = this.debug_parse();
            else
                parse_tree = this.parse();
        }
        catch (IndexerSpecException ise) {
            parser_errors.add(ise);
        }
        catch (Exception e) {
            parser_errors.add(new IndexerSpecException(e, " "));
            //parser_errors.add(" Input Specification "+strToParse);
        } 
        finally {
        }
        if (parse_tree != null) 
        {
            result = (MultiValueIndexer) parse_tree.value;
            if (result != null)
            {
                result.setSolrFieldNames(solrFields);
                result.setSpecLabel(strToParse);
             //   result.setParseErrors(parser_errors);
            }
        }
        return(result);     
    }
   
    public MultiValueIndexer parse(String solrFields, String strToParse)
    {
        return(parse(solrFields, strToParse, parser_debug));
    }
    
//    private static String toDelimitedString(String[] strs, String delimiter)
//    {
//        StringBuilder strb = new StringBuilder();
//        for (String str : strs)
//        {
//          strb.append(str).append(delimiter);
//        }
//        return strb.substring(0, strb.length() - delimiter.length());
//     }
    
    
    
    private AbstractValueExtractor<?> createCustomExtractor(String type, String classOrScriptName, List<String> methodPlusParams)
    {
        String[] specParts =new String[methodPlusParams.size()+2];
        specParts[0] = type;
        specParts[1] = classOrScriptName;
        System.arraycopy(methodPlusParams.toArray(new String[0]), 0, specParts, 2, methodPlusParams.size());
     //   methodPlusParams.toArray(new String[0]);
        for (final AbstractValueExtractorFactory factory : extractorFactories)
        {
            if (factory.canHandle("CUP Parser", specParts[0]))
            {
                return factory.createExtractor("CUP Parser", specParts);
            }
        }
        throw new IndexerSpecException("No indexer factory found for: " + Utils.join(specParts, " "));
    }
   
//    private AbstractValueExtractor<?> createExtractor(final String solrFieldName, final String[] mapParts)
//    {
//        for (final AbstractValueExtractorFactory factory : extractorFactories)
//        {
//            if (factory.canHandle(solrFieldName, mapParts[0]))
//            {
//                return factory.createExtractor(solrFieldName, mapParts);
//            }
//        }
//        throw new IndexerSpecException("No indexer factory found for: " + Utils.join(mapParts, " "));
//    }
    
    
    
//    private AbstractMultiValueMapping createMultiValueMapping(List<String> mapParams)
//    {
//        if (this.mappingFactories == null) 
//        {
//            this.mappingFactories = ValueIndexerFactory.instance().getMappingFactories();
//        }
//        String[] mapParts = mapParams.toArray(new String[0]);
//        for (final AbstractValueMappingFactory mappingFactory : mappingFactories)
//        {
//            if (mappingFactory.canHandle(mapParts[0]))
//            {
//                return mappingFactory.createMultiValueMapping(mapParts);
//            }
//        }
//        throw new IndexerSpecException("Could not handle map descriptor: " + Utils.join(mapParts, " ")); 
//        // + "\nLoaded impl factories:\n" + mappingFactories.toString().replaceAll(",", ",\n"));
//    }

    private AbstractMultiValueExtractor makeMultiValueExtractor(Object extractor)
    {
        if (AbstractMultiValueExtractor.class.isAssignableFrom(extractor.getClass()))   
        {
            return((AbstractMultiValueExtractor)extractor);
        }
        else if (AbstractSingleValueExtractor.class.isAssignableFrom(extractor.getClass())) 
        {
            return(new MultiValueWrapperSingleValueExtractor((AbstractSingleValueExtractor)extractor));
        }
        return(null);
    }
    
    public static final List<IndexerSpecException> getErrors()
    {
        if (scanner.getScannerErrors().size() == 0)
            return(parser_errors);
        List<IndexerSpecException> allErrors = new ArrayList<IndexerSpecException>();
        allErrors.addAll(parser_errors);
        for (String errMsg : scanner.getScannerErrors())
        {
            allErrors.add(new IndexerSpecException(errMsg));
        }
        return(allErrors);
    }
    
    public static final void addError(String errorMsg)
    {
        parser_errors.add(new IndexerSpecException(errorMsg));
    }
    
    public static final void addError(IndexerSpecException exception)
    {
        parser_errors.add(exception);
    }
    
    @Override
    public void report_error(String message, Object info)
    {
        ComplexSymbol top = (ComplexSymbol)stack.peek();
        if (info instanceof ComplexSymbol)
        {
            ComplexSymbol cs = (ComplexSymbol)info;
            addError(message+" at input symbol \""+cs.getName()+"\" following symbol "+ top.getName() + 
                    " (with value of : "+ cacheOfStrToParse.substring(top.left, top.right) +" )");
            return;
        }
    }
   
    protected void my_report_expected_token_ids()
    {
        List<Integer> ids = expected_token_ids();
        ArrayList<String> list = new ArrayList<String>();
        for (Integer expected : ids)
        {
            list.add(symbl_name_from_id(expected));
        }
        addError("instead expected token classes are "+list.toString());
    }
    
    public void syntax_error(Symbol cur_token)
    {
        report_error("Syntax error", cur_token);
        my_report_expected_token_ids();
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$FullConditionalParser$actions {
  private final FullConditionalParser parser;

  /** Constructor */
  CUP$FullConditionalParser$actions(FullConditionalParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$FullConditionalParser$do_action_part00000000(
    int                        CUP$FullConditionalParser$act_num,
    java_cup.runtime.lr_parser CUP$FullConditionalParser$parser,
    java.util.Stack            CUP$FullConditionalParser$stack,
    int                        CUP$FullConditionalParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$FullConditionalParser$result;

      /* select the action based on the action number */
      switch (CUP$FullConditionalParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= index_spec EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		AbstractValueIndexer< ? > start_val = (AbstractValueIndexer< ? >)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		RESULT = start_val;
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$FullConditionalParser$parser.done_parsing();
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // index_spec ::= extractor COMMA mapping_specs 
            {
              AbstractValueIndexer< ? > RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		AbstractValueExtractor< ? > e = (AbstractValueExtractor< ? >)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		List<List<String>> m = (List<List<String>>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = valueIndexerFactory.makeMultiValueIndexer(cacheOfStrToParse, new ArrayList<String>(), e, m); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("index_spec",0, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // index_spec ::= extractor 
            {
              AbstractValueIndexer< ? > RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		AbstractValueExtractor< ? > e = (AbstractValueExtractor< ? >)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = valueIndexerFactory.makeMultiValueIndexer(cacheOfStrToParse, new ArrayList<String>(), e, null); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("index_spec",0, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // extractor ::= strings 
            {
              AbstractValueExtractor< ? > RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new ConstantMultiValueExtractor(l); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("extractor",1, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // extractor ::= field_spec 
            {
              AbstractValueExtractor< ? > RESULT =null;
		Location fsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location fsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		CompositeSpecification fs = (CompositeSpecification)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new DirectMultiValueExtractor(fs);  
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("extractor",1, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // extractor ::= FULLRECORD 
            {
              AbstractValueExtractor< ? > RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = makeMultiValueExtractor(fullFactory.createExtractor("CUP Parser", new StringReader(s))); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("extractor",1, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // extractor ::= DATE 
            {
              AbstractValueExtractor< ? > RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = dateFactory.createExtractor("CUP Parser", new StringReader(s)); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("extractor",1, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // extractor ::= custom_extractor 
            {
              AbstractValueExtractor< ? > RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		AbstractValueExtractor< ? > e = (AbstractValueExtractor< ? >)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = e; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("extractor",1, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // extractor ::= error 
            {
              AbstractValueExtractor< ? > RESULT =null;
		 RESULT = null; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("extractor",1, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // strings ::= strings OR QUOTEDSTR 
            {
              List<String> RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = l; l.add(s); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("strings",6, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // strings ::= QUOTEDSTR 
            {
              List<String> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new ArrayList<String>(); RESULT.add(s); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("strings",6, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // custom_extractor ::= CUSTOM LPAREN IDENTIFIER RPAREN opt_comma method_plus_params 
            {
              AbstractValueExtractor< ? > RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)).xright;
		String t = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xright;
		String m = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = createCustomExtractor(t, m, l); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("custom_extractor",2, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // custom_extractor ::= JAVA LPAREN IDENTIFIER RPAREN opt_comma method_plus_params 
            {
              AbstractValueExtractor< ? > RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)).xright;
		String t = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xright;
		String m = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = createCustomExtractor(t, m, l); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("custom_extractor",2, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // custom_extractor ::= SCRIPT LPAREN IDENTIFIER RPAREN opt_comma method_plus_params 
            {
              AbstractValueExtractor< ? > RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)).xright;
		String t = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xright;
		String m = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = createCustomExtractor(t, m, l); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("custom_extractor",2, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // custom_extractor ::= CUSTOM COMMA method_plus_params 
            {
              AbstractValueExtractor< ? > RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		String t = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = createCustomExtractor(t, null, l); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("custom_extractor",2, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // custom_extractor ::= JAVA COMMA method_plus_params 
            {
              AbstractValueExtractor< ? > RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		String t = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = createCustomExtractor(t, null, l); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("custom_extractor",2, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // mapping_specs ::= mapping_specs COMMA mapping_spec 
            {
              List<List<String>> RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		List<List<String>> l = (List<List<String>>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		List<String> m = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = l; if (m != null) { l.add(m);} 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("mapping_specs",3, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // mapping_specs ::= mapping_spec 
            {
              List<List<String>> RESULT =null;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		List<String> m = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new ArrayList<List<String>>(); if (m != null) { RESULT.add(m);} 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("mapping_specs",3, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // mapping_spec ::= method_plus_params 
            {
              List<String> RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("mapping_spec",4, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // mapping_spec ::= custom_map_spec 
            {
              List<String> RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("mapping_spec",4, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // custom_map_spec ::= CUSTOM_MAP LPAREN IDENTIFIER opt_comma IDENTIFIER RPAREN 
            {
              List<String> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)).value;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xright;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).value;
		Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		 RESULT = new ArrayList<String>(); RESULT.add(s); RESULT.add(s1); RESULT.add(s2); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("custom_map_spec",9, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-5)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // custom_map_spec ::= CUSTOM_MAP LPAREN IDENTIFIER opt_comma IDENTIFIER LPAREN params RPAREN RPAREN 
            {
              List<String> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-8)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-8)).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-8)).value;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-6)).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-6)).xright;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-6)).value;
		Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-4)).xleft;
		Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-4)).xright;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-4)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		 RESULT = l; RESULT.add(0, s); RESULT.add(1, s1); RESULT.add(2, s2); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("custom_map_spec",9, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-8)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // custom_map_spec ::= error 
            {
              List<String> RESULT =null;
		 FullConditionalParser.addError("Malformed custom_map reference : Should be \ncustom_map(fully.qualified.class.Name method)\n or  custom_map(fully.qualified.class.Name method(parm1, parm2))"); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("custom_map_spec",9, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // opt_comma ::= COMMA 
            {
              String RESULT =null;

              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("opt_comma",18, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // opt_comma ::= 
            {
              String RESULT =null;

              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("opt_comma",18, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // method_plus_params ::= IDENTIFIER 
            {
              List<String> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = Collections.singletonList(s); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("method_plus_params",7, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // method_plus_params ::= IDENTIFIER LPAREN params RPAREN 
            {
              List<String> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		 RESULT = l; RESULT.add(0, s); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("method_plus_params",7, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // method_plus_params ::= LPAREN params RPAREN 
            {
              List<String> RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		 RESULT = l; RESULT.add(0, "(this).properties"); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("method_plus_params",7, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // params ::= params COMMA param 
            {
              List<String> RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = l; l.add(s); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("params",8, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // params ::= param 
            {
              List<String> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new ArrayList<String>(); RESULT.add(s); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("params",8, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // param ::= QUOTEDSTR 
            {
              String RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = s; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("param",19, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // param ::= IDENTIFIER 
            {
              String RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = s; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("param",19, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // param ::= NUMBER 
            {
              String RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = s; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("param",19, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // field_spec ::= field_spec COLON field_spec_part 
            {
              CompositeSpecification RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		CompositeSpecification s = (CompositeSpecification)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		CompositeSpecification s1 = (CompositeSpecification)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 s.addSpec(s1); RESULT = s; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec",10, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // field_spec ::= field_spec_part 
            {
              CompositeSpecification RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		CompositeSpecification s = (CompositeSpecification)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new CompositeSpecification(s); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec",10, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // field_spec_simple ::= field_spec_simple COLON field_spec_part_simple 
            {
              CompositeSpecification RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		CompositeSpecification s = (CompositeSpecification)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		SingleSpecification s1 = (SingleSpecification)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 s.addSpec(s1); RESULT = s; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_simple",11, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // field_spec_simple ::= field_spec_part_simple 
            {
              CompositeSpecification RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		SingleSpecification s = (SingleSpecification)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new CompositeSpecification(s); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_simple",11, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // field_spec_part ::= LBRACE field_spec_simple RBRACE QUESTION expr 
            {
              CompositeSpecification RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xright;
		CompositeSpecification s = (CompositeSpecification)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		Condition e = (Condition)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 s.addConditional(e); RESULT = s; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part",12, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-4)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // field_spec_part ::= field_spec_part_complex 
            {
              CompositeSpecification RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		SingleSpecification s = (SingleSpecification)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new CompositeSpecification(s); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part",12, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // field_spec_part_complex ::= field_spec_part_simple QUESTION expr 
            {
              SingleSpecification RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		SingleSpecification s = (SingleSpecification)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		Condition e = (Condition)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = s; s.addConditional(e); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part_complex",13, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // field_spec_part_complex ::= field_spec_part_simple 
            {
              SingleSpecification RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		SingleSpecification s = (SingleSpecification)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = s; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part_complex",13, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // field_spec_part_simple ::= FIELDSPEC SUBFIELDSPEC 
            {
              SingleSpecification RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		String f = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		Location sfxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sfxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String sf = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = AbstractSpecificationFactory.makeSingleSpecification(f, sf); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part_simple",14, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // field_spec_part_simple ::= FIELDSPEC SUBFIELDSPEC POSITION 
            {
              SingleSpecification RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		String f = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location sfxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location sfxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		String sf = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String p = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = AbstractSpecificationFactory.makeSingleSpecification(f, sf, p); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part_simple",14, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // field_spec_part_simple ::= FIELDSPEC POSITION 
            {
              SingleSpecification RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		String f = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String p = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = AbstractSpecificationFactory.makeSingleSpecification(f, null, p); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part_simple",14, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // field_spec_part_simple ::= FIELDSPEC 
            {
              SingleSpecification RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String f = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = AbstractSpecificationFactory.makeSingleSpecification(f, null); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("field_spec_part_simple",14, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= expr AND expr 
            {
              Condition RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		Condition e1 = (Condition)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		Condition e2 = (Condition)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new ConditionComposite(e1, e2, FullSym.AND);  
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= expr OR expr 
            {
              Condition RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		Condition e1 = (Condition)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		Condition e2 = (Condition)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new ConditionComposite(e1, e2, FullSym.OR);  
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= NOT expr 
            {
              Condition RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		Condition e = (Condition)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new ConditionComposite(e, null, FullSym.NOT); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= LPAREN expr RPAREN 
            {
              Condition RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		Condition e = (Condition)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		 RESULT = e; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= expr_part 
            {
              Condition RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		Condition e = (Condition)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = e; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr_part ::= SUBFIELD op value 
            {
              Condition RESULT =null;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new ConditionSubfield(s1, s2, ((int)i)); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("expr_part",16, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr_part ::= IND op value 
            {
              Condition RESULT =null;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new ConditionIndicator(s1, s2, ((int)i)); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("expr_part",16, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr_part ::= POSITION op value 
            {
              Condition RESULT =null;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new ConditionPosition(s1, s2, ((int)i)); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("expr_part",16, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr_part ::= FIELDSPEC SUBFIELD op value 
            {
              Condition RESULT =null;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xright;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).value;
		Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		Location s3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location s3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s3 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new ConditionSubfield(s1, s2, s3, ((int)i)); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("expr_part",16, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr_part ::= FIELDSPEC IND op value 
            {
              Condition RESULT =null;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xright;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).value;
		Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		Location s3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location s3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s3 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new ConditionIndicator(s1, s2, s3, ((int)i)); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("expr_part",16, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr_part ::= FIELDSPEC POSITION op value 
            {
              Condition RESULT =null;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).xright;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)).value;
		Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xleft;
		Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).xright;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-2)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).xright;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-1)).value;
		Location s3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location s3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s3 = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = new ConditionPosition(s1, s2, s3, ((int)i)); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("expr_part",16, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.elementAt(CUP$FullConditionalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // op ::= EQU 
            {
              Integer RESULT =null;
		 RESULT = new Integer(FullSym.EQU); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("op",20, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // op ::= NEQ 
            {
              Integer RESULT =null;
		 RESULT = new Integer(FullSym.NEQ); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("op",20, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // op ::= MATCH 
            {
              Integer RESULT =null;
		 RESULT = new Integer(FullSym.MATCH); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("op",20, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // op ::= CONTAINS 
            {
              Integer RESULT =null;
		 RESULT = new Integer(FullSym.CONTAINS); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("op",20, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // op ::= LT 
            {
              Integer RESULT =null;
		 RESULT = new Integer(FullSym.LT); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("op",20, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // op ::= GT 
            {
              Integer RESULT =null;
		 RESULT = new Integer(FullSym.GT); 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("op",20, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // value ::= QUOTEDSTR 
            {
              String RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = s; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("value",17, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // value ::= CHAR 
            {
              String RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = s; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("value",17, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // value ::= NUMBER 
            {
              String RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$FullConditionalParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$FullConditionalParser$stack.peek()).value;
		 RESULT = s; 
              CUP$FullConditionalParser$result = parser.getSymbolFactory().newSymbol("value",17, ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FullConditionalParser$stack.peek()), RESULT);
            }
          return CUP$FullConditionalParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$FullConditionalParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$FullConditionalParser$do_action(
    int                        CUP$FullConditionalParser$act_num,
    java_cup.runtime.lr_parser CUP$FullConditionalParser$parser,
    java.util.Stack            CUP$FullConditionalParser$stack,
    int                        CUP$FullConditionalParser$top)
    throws java.lang.Exception
    {
              return CUP$FullConditionalParser$do_action_part00000000(
                               CUP$FullConditionalParser$act_num,
                               CUP$FullConditionalParser$parser,
                               CUP$FullConditionalParser$stack,
                               CUP$FullConditionalParser$top);
    }
}

}
